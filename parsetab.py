
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightGTLTLOEGOEEQUALSDIFFERENTrightANDORleftAFFECTAFFECT AND CAND COMMA COR DIFFERENT DIVIDE ELSE END EQUALS FOR GOE GT IF LET LOE LPAREN LT MINUS NAME NUMBER OR PLUS PRINT RETURN RPAREN SEMICOLON TIMES UNTIL WHILEstart : blockblock : instruction  block \n    | condition block\n    | loop block\n    |  funcdef blockblock : instruction\n    | condition\n    | loop\n    | funcdeffuncdef : LET NAME LPAREN declarg RPAREN  block ENDfuncdef : LET NAME LPAREN  RPAREN  block ENDfuncdef : LET NAME LPAREN declarg RPAREN block RETURN expression ENDfuncdef : LET NAME LPAREN RPAREN block RETURN expression ENDstatement : NAME LPAREN callarg RPARENstatement : NAME LPAREN  RPARENexpression : NAME LPAREN callarg RPARENexpression : NAME LPAREN  RPARENdeclarg : NAME COMMA declargdeclarg : NAMEcallarg : expression COMMA callargcallarg : expressioninstruction : statement SEMICOLON\n    | expression SEMICOLON statement : NAME AFFECT expressioncondition : IF LPAREN boolexpr RPAREN block ENDcondition : IF LPAREN boolexpr RPAREN block ELSE block ENDloop : WHILE LPAREN boolexpr RPAREN block ENDloop : UNTIL LPAREN boolexpr RPAREN block ENDloop : FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement  RPAREN block ENDboolexpr : boolexpr COR boolexprboolexpr : expression CAND expressionboolexpr : expression GT expressionboolexpr : expression LT expressionboolexpr : expression LOE expressionboolexpr : expression GOE expressionboolexpr : expression EQUALS expressionboolexpr : expression DIFFERENT expressionexpression : PRINT LPAREN expression RPARENexpression : expression PLUS expressionexpression : expression TIMES expressionexpression : expression MINUS expressionexpression : expression DIVIDE expressionexpression : expression OR expressionexpression : expression AND expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : NAME'
    
_lr_action_items = {'IF':([0,3,4,5,6,22,23,59,70,71,77,94,96,97,98,99,103,108,111,113,115,119,121,],[9,9,9,9,9,-22,-23,9,9,9,9,9,-25,9,-27,-28,-11,-10,-26,9,-13,-12,-29,]),'WHILE':([0,3,4,5,6,22,23,59,70,71,77,94,96,97,98,99,103,108,111,113,115,119,121,],[11,11,11,11,11,-22,-23,11,11,11,11,11,-25,11,-27,-28,-11,-10,-26,11,-13,-12,-29,]),'UNTIL':([0,3,4,5,6,22,23,59,70,71,77,94,96,97,98,99,103,108,111,113,115,119,121,],[12,12,12,12,12,-22,-23,12,12,12,12,12,-25,12,-27,-28,-11,-10,-26,12,-13,-12,-29,]),'FOR':([0,3,4,5,6,22,23,59,70,71,77,94,96,97,98,99,103,108,111,113,115,119,121,],[13,13,13,13,13,-22,-23,13,13,13,13,13,-25,13,-27,-28,-11,-10,-26,13,-13,-12,-29,]),'LET':([0,3,4,5,6,22,23,59,70,71,77,94,96,97,98,99,103,108,111,113,115,119,121,],[15,15,15,15,15,-22,-23,15,15,15,15,15,-25,15,-27,-28,-11,-10,-26,15,-13,-12,-29,]),'NAME':([0,3,4,5,6,10,15,22,23,24,25,26,27,28,29,30,33,34,35,36,37,39,49,57,59,60,61,62,63,64,65,66,67,70,71,72,74,77,93,94,96,97,98,99,100,103,104,108,109,111,112,113,115,119,121,],[14,14,14,14,14,32,38,-22,-23,32,32,32,32,32,32,32,32,32,52,32,32,32,32,75,14,32,32,32,32,32,32,32,32,14,14,32,32,14,75,14,-25,14,-27,-28,106,-11,32,-10,32,-26,32,14,-13,-12,-29,]),'PRINT':([0,3,4,5,6,10,22,23,24,25,26,27,28,29,30,33,34,36,37,39,49,59,60,61,62,63,64,65,66,67,70,71,72,74,77,94,96,97,98,99,103,104,108,109,111,112,113,115,119,121,],[16,16,16,16,16,16,-22,-23,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-25,16,-27,-28,-11,16,-10,16,-26,16,16,-13,-12,-29,]),'LPAREN':([0,3,4,5,6,9,10,11,12,13,14,16,22,23,24,25,26,27,28,29,30,32,33,34,36,37,38,39,49,59,60,61,62,63,64,65,66,67,70,71,72,74,77,94,96,97,98,99,103,104,106,108,109,111,112,113,115,119,121,],[10,10,10,10,10,30,10,33,34,35,36,39,-22,-23,10,10,10,10,10,10,10,49,10,10,10,10,57,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,-25,10,-27,-28,-11,10,112,-10,10,-26,10,10,-13,-12,-29,]),'NUMBER':([0,3,4,5,6,10,22,23,24,25,26,27,28,29,30,33,34,36,37,39,49,59,60,61,62,63,64,65,66,67,70,71,72,74,77,94,96,97,98,99,103,104,108,109,111,112,113,115,119,121,],[17,17,17,17,17,17,-22,-23,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-25,17,-27,-28,-11,17,-10,17,-26,17,17,-13,-12,-29,]),'$end':([1,2,3,4,5,6,18,19,20,21,22,23,96,98,99,103,108,111,115,119,121,],[0,-1,-6,-7,-8,-9,-2,-3,-4,-5,-22,-23,-25,-27,-28,-11,-10,-26,-13,-12,-29,]),'END':([3,4,5,6,17,18,19,20,21,22,23,32,40,41,42,43,44,45,48,69,78,79,88,89,90,95,96,98,99,102,103,105,108,110,111,114,115,118,119,121,],[-6,-7,-8,-9,-46,-2,-3,-4,-5,-22,-23,-47,-39,-40,-41,-42,-43,-44,-45,-17,-38,96,-16,98,99,103,-25,-27,-28,108,-11,111,-10,115,-26,119,-13,121,-12,-29,]),'ELSE':([3,4,5,6,18,19,20,21,22,23,79,96,98,99,103,108,111,115,119,121,],[-6,-7,-8,-9,-2,-3,-4,-5,-22,-23,97,-25,-27,-28,-11,-10,-26,-13,-12,-29,]),'RETURN':([3,4,5,6,18,19,20,21,22,23,95,96,98,99,102,103,108,111,115,119,121,],[-6,-7,-8,-9,-2,-3,-4,-5,-22,-23,104,-25,-27,-28,109,-11,-10,-26,-13,-12,-29,]),'SEMICOLON':([7,8,14,17,32,40,41,42,43,44,45,48,52,54,56,69,73,78,80,81,82,83,84,85,86,87,88,91,],[22,23,-47,-46,-47,-39,-40,-41,-42,-43,-44,-45,72,-15,-24,-17,-14,-38,-30,-31,-32,-33,-34,-35,-36,-37,-16,100,]),'PLUS':([8,14,17,31,32,40,41,42,43,44,45,47,48,54,55,56,58,69,73,78,81,82,83,84,85,86,87,88,110,114,],[24,-47,-46,24,-47,-39,-40,-41,-42,-43,-44,24,-45,-17,24,24,24,-17,-16,-38,24,24,24,24,24,24,24,-16,24,24,]),'TIMES':([8,14,17,31,32,40,41,42,43,44,45,47,48,54,55,56,58,69,73,78,81,82,83,84,85,86,87,88,110,114,],[25,-47,-46,25,-47,25,-40,25,-42,-43,-44,25,-45,-17,25,25,25,-17,-16,-38,25,25,25,25,25,25,25,-16,25,25,]),'MINUS':([8,14,17,31,32,40,41,42,43,44,45,47,48,54,55,56,58,69,73,78,81,82,83,84,85,86,87,88,110,114,],[26,-47,-46,26,-47,-39,-40,-41,-42,-43,-44,26,-45,-17,26,26,26,-17,-16,-38,26,26,26,26,26,26,26,-16,26,26,]),'DIVIDE':([8,14,17,31,32,40,41,42,43,44,45,47,48,54,55,56,58,69,73,78,81,82,83,84,85,86,87,88,110,114,],[27,-47,-46,27,-47,27,-40,27,-42,-43,-44,27,-45,-17,27,27,27,-17,-16,-38,27,27,27,27,27,27,27,-16,27,27,]),'OR':([8,14,17,31,32,40,41,42,43,44,45,47,48,54,55,56,58,69,73,78,81,82,83,84,85,86,87,88,110,114,],[28,-47,-46,28,-47,28,28,28,28,28,28,28,-45,-17,28,28,28,-17,-16,-38,28,28,28,28,28,28,28,-16,28,28,]),'AND':([8,14,17,31,32,40,41,42,43,44,45,47,48,54,55,56,58,69,73,78,81,82,83,84,85,86,87,88,110,114,],[29,-47,-46,29,-47,29,29,29,29,29,29,29,-45,-17,29,29,29,-17,-16,-38,29,29,29,29,29,29,29,-16,29,29,]),'AFFECT':([14,106,],[37,37,]),'RPAREN':([17,31,32,36,40,41,42,43,44,45,46,48,49,50,51,53,55,56,57,58,68,69,75,76,78,80,81,82,83,84,85,86,87,88,92,101,107,112,116,117,120,],[-46,48,-47,54,-39,-40,-41,-42,-43,-44,59,-45,69,70,71,73,-21,-24,77,78,88,-17,-19,94,-38,-30,-31,-32,-33,-34,-35,-36,-37,-16,-20,-18,113,117,120,-15,-14,]),'CAND':([17,32,40,41,42,43,44,45,47,48,69,78,88,],[-46,-47,-39,-40,-41,-42,-43,-44,61,-45,-17,-38,-16,]),'GT':([17,32,40,41,42,43,44,45,47,48,69,78,88,],[-46,-47,-39,-40,-41,-42,-43,-44,62,-45,-17,-38,-16,]),'LT':([17,32,40,41,42,43,44,45,47,48,69,78,88,],[-46,-47,-39,-40,-41,-42,-43,-44,63,-45,-17,-38,-16,]),'LOE':([17,32,40,41,42,43,44,45,47,48,69,78,88,],[-46,-47,-39,-40,-41,-42,-43,-44,64,-45,-17,-38,-16,]),'GOE':([17,32,40,41,42,43,44,45,47,48,69,78,88,],[-46,-47,-39,-40,-41,-42,-43,-44,65,-45,-17,-38,-16,]),'EQUALS':([17,32,40,41,42,43,44,45,47,48,69,78,88,],[-46,-47,-39,-40,-41,-42,-43,-44,66,-45,-17,-38,-16,]),'DIFFERENT':([17,32,40,41,42,43,44,45,47,48,69,78,88,],[-46,-47,-39,-40,-41,-42,-43,-44,67,-45,-17,-38,-16,]),'COMMA':([17,32,40,41,42,43,44,45,48,55,69,75,78,88,],[-46,-47,-39,-40,-41,-42,-43,-44,-45,74,-17,93,-38,-16,]),'COR':([17,32,40,41,42,43,44,45,46,48,50,51,69,78,80,81,82,83,84,85,86,87,88,91,],[-46,-47,-39,-40,-41,-42,-43,-44,60,-45,60,60,-17,-38,60,-31,-32,-33,-34,-35,-36,-37,-16,60,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'block':([0,3,4,5,6,59,70,71,77,94,97,113,],[2,18,19,20,21,79,89,90,95,102,105,118,]),'instruction':([0,3,4,5,6,59,70,71,77,94,97,113,],[3,3,3,3,3,3,3,3,3,3,3,3,]),'condition':([0,3,4,5,6,59,70,71,77,94,97,113,],[4,4,4,4,4,4,4,4,4,4,4,4,]),'loop':([0,3,4,5,6,59,70,71,77,94,97,113,],[5,5,5,5,5,5,5,5,5,5,5,5,]),'funcdef':([0,3,4,5,6,59,70,71,77,94,97,113,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'statement':([0,3,4,5,6,59,70,71,77,94,97,100,113,],[7,7,7,7,7,7,7,7,7,7,7,107,7,]),'expression':([0,3,4,5,6,10,24,25,26,27,28,29,30,33,34,36,37,39,49,59,60,61,62,63,64,65,66,67,70,71,72,74,77,94,97,104,109,112,113,],[8,8,8,8,8,31,40,41,42,43,44,45,47,47,47,55,56,58,55,8,47,81,82,83,84,85,86,87,8,8,47,55,8,8,8,110,114,55,8,]),'boolexpr':([30,33,34,60,72,],[46,50,51,80,91,]),'callarg':([36,49,74,112,],[53,68,92,116,]),'declarg':([57,93,],[76,101,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> block','start',1,'p_start','main.py',98),
  ('block -> instruction block','block',2,'p_block','main.py',106),
  ('block -> condition block','block',2,'p_block','main.py',107),
  ('block -> loop block','block',2,'p_block','main.py',108),
  ('block -> funcdef block','block',2,'p_block','main.py',109),
  ('block -> instruction','block',1,'p_block_terminal','main.py',114),
  ('block -> condition','block',1,'p_block_terminal','main.py',115),
  ('block -> loop','block',1,'p_block_terminal','main.py',116),
  ('block -> funcdef','block',1,'p_block_terminal','main.py',117),
  ('funcdef -> LET NAME LPAREN declarg RPAREN block END','funcdef',7,'p_define_void','main.py',122),
  ('funcdef -> LET NAME LPAREN RPAREN block END','funcdef',6,'p_define_noparam_void','main.py',126),
  ('funcdef -> LET NAME LPAREN declarg RPAREN block RETURN expression END','funcdef',9,'p_define_function','main.py',131),
  ('funcdef -> LET NAME LPAREN RPAREN block RETURN expression END','funcdef',8,'p_define_noparam_function','main.py',135),
  ('statement -> NAME LPAREN callarg RPAREN','statement',4,'p_call_void_statement','main.py',141),
  ('statement -> NAME LPAREN RPAREN','statement',3,'p_call_noparam_void_statement','main.py',145),
  ('expression -> NAME LPAREN callarg RPAREN','expression',4,'p_call_func_statement','main.py',149),
  ('expression -> NAME LPAREN RPAREN','expression',3,'p_call_noparam_func_statement','main.py',153),
  ('declarg -> NAME COMMA declarg','declarg',3,'p_declargs','main.py',158),
  ('declarg -> NAME','declarg',1,'p_declarg','main.py',163),
  ('callarg -> expression COMMA callarg','callarg',3,'p_callargs','main.py',167),
  ('callarg -> expression','callarg',1,'p_callarg','main.py',171),
  ('instruction -> statement SEMICOLON','instruction',2,'p_instruction','main.py',197),
  ('instruction -> expression SEMICOLON','instruction',2,'p_instruction','main.py',198),
  ('statement -> NAME AFFECT expression','statement',3,'p_statement_affect','main.py',203),
  ('condition -> IF LPAREN boolexpr RPAREN block END','condition',6,'p_statement_if','main.py',208),
  ('condition -> IF LPAREN boolexpr RPAREN block ELSE block END','condition',8,'p_statement_if_else','main.py',213),
  ('loop -> WHILE LPAREN boolexpr RPAREN block END','loop',6,'p_loop_while','main.py',218),
  ('loop -> UNTIL LPAREN boolexpr RPAREN block END','loop',6,'p_loop_until','main.py',223),
  ('loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END','loop',10,'p_loop_for','main.py',228),
  ('boolexpr -> boolexpr COR boolexpr','boolexpr',3,'p_boolexpr_or','main.py',233),
  ('boolexpr -> expression CAND expression','boolexpr',3,'p_boolexpr_and','main.py',238),
  ('boolexpr -> expression GT expression','boolexpr',3,'p_boolexpr_comp_gt','main.py',243),
  ('boolexpr -> expression LT expression','boolexpr',3,'p_boolexpr_comp_lt','main.py',248),
  ('boolexpr -> expression LOE expression','boolexpr',3,'p_boolexpr_comp_loe','main.py',253),
  ('boolexpr -> expression GOE expression','boolexpr',3,'p_boolexpr_comp_goe','main.py',258),
  ('boolexpr -> expression EQUALS expression','boolexpr',3,'p_boolexpr_comp_equals','main.py',263),
  ('boolexpr -> expression DIFFERENT expression','boolexpr',3,'p_boolexpr_comp_different','main.py',268),
  ('expression -> PRINT LPAREN expression RPAREN','expression',4,'p_expression_print','main.py',273),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop_plus','main.py',278),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop_times','main.py',283),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop_minus','main.py',288),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop_divide','main.py',293),
  ('expression -> expression OR expression','expression',3,'p_expression_binop_or','main.py',298),
  ('expression -> expression AND expression','expression',3,'p_expression_binop_and','main.py',303),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','main.py',320),
  ('expression -> NUMBER','expression',1,'p_expression_number','main.py',325),
  ('expression -> NAME','expression',1,'p_expression_name','main.py',330),
]
