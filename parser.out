Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    VAL

Grammar

Rule 0     S' -> start
Rule 1     start -> block
Rule 2     block -> instruction block
Rule 3     block -> condition block
Rule 4     block -> loop block
Rule 5     block -> funcdef block
Rule 6     block -> instruction
Rule 7     block -> condition
Rule 8     block -> loop
Rule 9     block -> funcdef
Rule 10    funcdef -> LET NAME LPAREN declarg RPAREN block END
Rule 11    funcdef -> LET NAME LPAREN RPAREN block END
Rule 12    statement -> RETURN expression
Rule 13    statement -> NAME LPAREN callarg RPAREN
Rule 14    statement -> NAME LPAREN RPAREN
Rule 15    expression -> NAME LPAREN callarg RPAREN
Rule 16    expression -> NAME LPAREN RPAREN
Rule 17    declarg -> NAME COMMA declarg
Rule 18    declarg -> NAME
Rule 19    callarg -> expression COMMA callarg
Rule 20    callarg -> expression
Rule 21    instruction -> statement SEMICOLON
Rule 22    instruction -> expression SEMICOLON
Rule 23    statement -> NAME AFFECT expression
Rule 24    statement -> NAME AFFECT address
Rule 25    statement -> VAR NAME
Rule 26    statement -> VAR NAME AFFECT expression
Rule 27    statement -> VAR NAME AFFECT address
Rule 28    condition -> IF LPAREN boolexpr RPAREN block END
Rule 29    condition -> IF LPAREN boolexpr RPAREN block ELSE block END
Rule 30    loop -> WHILE LPAREN boolexpr RPAREN block END
Rule 31    loop -> UNTIL LPAREN boolexpr RPAREN block END
Rule 32    loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END
Rule 33    boolexpr -> boolexpr COR boolexpr
Rule 34    boolexpr -> expression CAND expression
Rule 35    boolexpr -> expression GT expression
Rule 36    boolexpr -> expression LT expression
Rule 37    boolexpr -> expression LOE expression
Rule 38    boolexpr -> expression GOE expression
Rule 39    boolexpr -> expression EQUALS expression
Rule 40    boolexpr -> expression DIFFERENT expression
Rule 41    expression -> PRINT LPAREN expression RPAREN
Rule 42    expression -> expression PLUS expression
Rule 43    expression -> NAME SHORTINCR
Rule 44    expression -> NAME SHORTADD expression
Rule 45    expression -> expression TIMES expression
Rule 46    expression -> expression MINUS expression
Rule 47    expression -> expression DIVIDE expression
Rule 48    expression -> expression OR expression
Rule 49    expression -> expression AND expression
Rule 50    expression -> LPAREN expression RPAREN
Rule 51    expression -> NUMBER
Rule 52    expression -> NAME
Rule 53    address -> REF NAME

Terminals, with rules where they appear

AFFECT               : 23 24 26 27
AND                  : 49
CAND                 : 34
COMMA                : 17 19
COR                  : 33
DIFFERENT            : 40
DIVIDE               : 47
ELSE                 : 29
END                  : 10 11 28 29 30 31 32
EQUALS               : 39
FOR                  : 32
GOE                  : 38
GT                   : 35
IF                   : 28 29
LET                  : 10 11
LOE                  : 37
LPAREN               : 10 11 13 14 15 16 28 29 30 31 32 41 50
LT                   : 36
MINUS                : 46
NAME                 : 10 11 13 14 15 16 17 18 23 24 25 26 27 32 43 44 52 53
NUMBER               : 51
OR                   : 48
PLUS                 : 42
PRINT                : 41
REF                  : 53
RETURN               : 12
RPAREN               : 10 11 13 14 15 16 28 29 30 31 32 41 50
SEMICOLON            : 21 22 32 32
SHORTADD             : 44
SHORTINCR            : 43
TIMES                : 45
UNTIL                : 31
VAL                  : 
VAR                  : 25 26 27
WHILE                : 30
error                : 

Nonterminals, with rules where they appear

address              : 24 27
block                : 1 2 3 4 5 10 11 28 29 29 30 31 32
boolexpr             : 28 29 30 31 32 33 33
callarg              : 13 15 19
condition            : 3 7
declarg              : 10 17
expression           : 12 19 20 22 23 26 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 42 42 44 45 45 46 46 47 47 48 48 49 49 50
funcdef              : 5 9
instruction          : 2 6
loop                 : 4 8
start                : 0
statement            : 21 32

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . block
    (2) block -> . instruction block
    (3) block -> . condition block
    (4) block -> . loop block
    (5) block -> . funcdef block
    (6) block -> . instruction
    (7) block -> . condition
    (8) block -> . loop
    (9) block -> . funcdef
    (21) instruction -> . statement SEMICOLON
    (22) instruction -> . expression SEMICOLON
    (28) condition -> . IF LPAREN boolexpr RPAREN block END
    (29) condition -> . IF LPAREN boolexpr RPAREN block ELSE block END
    (30) loop -> . WHILE LPAREN boolexpr RPAREN block END
    (31) loop -> . UNTIL LPAREN boolexpr RPAREN block END
    (32) loop -> . FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END
    (10) funcdef -> . LET NAME LPAREN declarg RPAREN block END
    (11) funcdef -> . LET NAME LPAREN RPAREN block END
    (12) statement -> . RETURN expression
    (13) statement -> . NAME LPAREN callarg RPAREN
    (14) statement -> . NAME LPAREN RPAREN
    (23) statement -> . NAME AFFECT expression
    (24) statement -> . NAME AFFECT address
    (25) statement -> . VAR NAME
    (26) statement -> . VAR NAME AFFECT expression
    (27) statement -> . VAR NAME AFFECT address
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    IF              shift and go to state 9
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 12
    FOR             shift and go to state 13
    LET             shift and go to state 15
    RETURN          shift and go to state 16
    NAME            shift and go to state 14
    VAR             shift and go to state 17
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    start                          shift and go to state 1
    block                          shift and go to state 2
    instruction                    shift and go to state 3
    condition                      shift and go to state 4
    loop                           shift and go to state 5
    funcdef                        shift and go to state 6
    statement                      shift and go to state 7
    expression                     shift and go to state 8

state 1

    (0) S' -> start .



state 2

    (1) start -> block .

    $end            reduce using rule 1 (start -> block .)


state 3

    (2) block -> instruction . block
    (6) block -> instruction .
    (2) block -> . instruction block
    (3) block -> . condition block
    (4) block -> . loop block
    (5) block -> . funcdef block
    (6) block -> . instruction
    (7) block -> . condition
    (8) block -> . loop
    (9) block -> . funcdef
    (21) instruction -> . statement SEMICOLON
    (22) instruction -> . expression SEMICOLON
    (28) condition -> . IF LPAREN boolexpr RPAREN block END
    (29) condition -> . IF LPAREN boolexpr RPAREN block ELSE block END
    (30) loop -> . WHILE LPAREN boolexpr RPAREN block END
    (31) loop -> . UNTIL LPAREN boolexpr RPAREN block END
    (32) loop -> . FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END
    (10) funcdef -> . LET NAME LPAREN declarg RPAREN block END
    (11) funcdef -> . LET NAME LPAREN RPAREN block END
    (12) statement -> . RETURN expression
    (13) statement -> . NAME LPAREN callarg RPAREN
    (14) statement -> . NAME LPAREN RPAREN
    (23) statement -> . NAME AFFECT expression
    (24) statement -> . NAME AFFECT address
    (25) statement -> . VAR NAME
    (26) statement -> . VAR NAME AFFECT expression
    (27) statement -> . VAR NAME AFFECT address
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    $end            reduce using rule 6 (block -> instruction .)
    END             reduce using rule 6 (block -> instruction .)
    ELSE            reduce using rule 6 (block -> instruction .)
    IF              shift and go to state 9
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 12
    FOR             shift and go to state 13
    LET             shift and go to state 15
    RETURN          shift and go to state 16
    NAME            shift and go to state 14
    VAR             shift and go to state 17
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    instruction                    shift and go to state 3
    block                          shift and go to state 20
    condition                      shift and go to state 4
    loop                           shift and go to state 5
    funcdef                        shift and go to state 6
    statement                      shift and go to state 7
    expression                     shift and go to state 8

state 4

    (3) block -> condition . block
    (7) block -> condition .
    (2) block -> . instruction block
    (3) block -> . condition block
    (4) block -> . loop block
    (5) block -> . funcdef block
    (6) block -> . instruction
    (7) block -> . condition
    (8) block -> . loop
    (9) block -> . funcdef
    (21) instruction -> . statement SEMICOLON
    (22) instruction -> . expression SEMICOLON
    (28) condition -> . IF LPAREN boolexpr RPAREN block END
    (29) condition -> . IF LPAREN boolexpr RPAREN block ELSE block END
    (30) loop -> . WHILE LPAREN boolexpr RPAREN block END
    (31) loop -> . UNTIL LPAREN boolexpr RPAREN block END
    (32) loop -> . FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END
    (10) funcdef -> . LET NAME LPAREN declarg RPAREN block END
    (11) funcdef -> . LET NAME LPAREN RPAREN block END
    (12) statement -> . RETURN expression
    (13) statement -> . NAME LPAREN callarg RPAREN
    (14) statement -> . NAME LPAREN RPAREN
    (23) statement -> . NAME AFFECT expression
    (24) statement -> . NAME AFFECT address
    (25) statement -> . VAR NAME
    (26) statement -> . VAR NAME AFFECT expression
    (27) statement -> . VAR NAME AFFECT address
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    $end            reduce using rule 7 (block -> condition .)
    END             reduce using rule 7 (block -> condition .)
    ELSE            reduce using rule 7 (block -> condition .)
    IF              shift and go to state 9
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 12
    FOR             shift and go to state 13
    LET             shift and go to state 15
    RETURN          shift and go to state 16
    NAME            shift and go to state 14
    VAR             shift and go to state 17
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    condition                      shift and go to state 4
    block                          shift and go to state 21
    instruction                    shift and go to state 3
    loop                           shift and go to state 5
    funcdef                        shift and go to state 6
    statement                      shift and go to state 7
    expression                     shift and go to state 8

state 5

    (4) block -> loop . block
    (8) block -> loop .
    (2) block -> . instruction block
    (3) block -> . condition block
    (4) block -> . loop block
    (5) block -> . funcdef block
    (6) block -> . instruction
    (7) block -> . condition
    (8) block -> . loop
    (9) block -> . funcdef
    (21) instruction -> . statement SEMICOLON
    (22) instruction -> . expression SEMICOLON
    (28) condition -> . IF LPAREN boolexpr RPAREN block END
    (29) condition -> . IF LPAREN boolexpr RPAREN block ELSE block END
    (30) loop -> . WHILE LPAREN boolexpr RPAREN block END
    (31) loop -> . UNTIL LPAREN boolexpr RPAREN block END
    (32) loop -> . FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END
    (10) funcdef -> . LET NAME LPAREN declarg RPAREN block END
    (11) funcdef -> . LET NAME LPAREN RPAREN block END
    (12) statement -> . RETURN expression
    (13) statement -> . NAME LPAREN callarg RPAREN
    (14) statement -> . NAME LPAREN RPAREN
    (23) statement -> . NAME AFFECT expression
    (24) statement -> . NAME AFFECT address
    (25) statement -> . VAR NAME
    (26) statement -> . VAR NAME AFFECT expression
    (27) statement -> . VAR NAME AFFECT address
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    $end            reduce using rule 8 (block -> loop .)
    END             reduce using rule 8 (block -> loop .)
    ELSE            reduce using rule 8 (block -> loop .)
    IF              shift and go to state 9
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 12
    FOR             shift and go to state 13
    LET             shift and go to state 15
    RETURN          shift and go to state 16
    NAME            shift and go to state 14
    VAR             shift and go to state 17
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    loop                           shift and go to state 5
    block                          shift and go to state 22
    instruction                    shift and go to state 3
    condition                      shift and go to state 4
    funcdef                        shift and go to state 6
    statement                      shift and go to state 7
    expression                     shift and go to state 8

state 6

    (5) block -> funcdef . block
    (9) block -> funcdef .
    (2) block -> . instruction block
    (3) block -> . condition block
    (4) block -> . loop block
    (5) block -> . funcdef block
    (6) block -> . instruction
    (7) block -> . condition
    (8) block -> . loop
    (9) block -> . funcdef
    (21) instruction -> . statement SEMICOLON
    (22) instruction -> . expression SEMICOLON
    (28) condition -> . IF LPAREN boolexpr RPAREN block END
    (29) condition -> . IF LPAREN boolexpr RPAREN block ELSE block END
    (30) loop -> . WHILE LPAREN boolexpr RPAREN block END
    (31) loop -> . UNTIL LPAREN boolexpr RPAREN block END
    (32) loop -> . FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END
    (10) funcdef -> . LET NAME LPAREN declarg RPAREN block END
    (11) funcdef -> . LET NAME LPAREN RPAREN block END
    (12) statement -> . RETURN expression
    (13) statement -> . NAME LPAREN callarg RPAREN
    (14) statement -> . NAME LPAREN RPAREN
    (23) statement -> . NAME AFFECT expression
    (24) statement -> . NAME AFFECT address
    (25) statement -> . VAR NAME
    (26) statement -> . VAR NAME AFFECT expression
    (27) statement -> . VAR NAME AFFECT address
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    $end            reduce using rule 9 (block -> funcdef .)
    END             reduce using rule 9 (block -> funcdef .)
    ELSE            reduce using rule 9 (block -> funcdef .)
    IF              shift and go to state 9
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 12
    FOR             shift and go to state 13
    LET             shift and go to state 15
    RETURN          shift and go to state 16
    NAME            shift and go to state 14
    VAR             shift and go to state 17
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    funcdef                        shift and go to state 6
    block                          shift and go to state 23
    instruction                    shift and go to state 3
    condition                      shift and go to state 4
    loop                           shift and go to state 5
    statement                      shift and go to state 7
    expression                     shift and go to state 8

state 7

    (21) instruction -> statement . SEMICOLON

    SEMICOLON       shift and go to state 24


state 8

    (22) instruction -> expression . SEMICOLON
    (42) expression -> expression . PLUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . AND expression

    SEMICOLON       shift and go to state 25
    PLUS            shift and go to state 26
    TIMES           shift and go to state 27
    MINUS           shift and go to state 28
    DIVIDE          shift and go to state 29
    OR              shift and go to state 30
    AND             shift and go to state 31


state 9

    (28) condition -> IF . LPAREN boolexpr RPAREN block END
    (29) condition -> IF . LPAREN boolexpr RPAREN block ELSE block END

    LPAREN          shift and go to state 32


state 10

    (50) expression -> LPAREN . expression RPAREN
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 33

state 11

    (30) loop -> WHILE . LPAREN boolexpr RPAREN block END

    LPAREN          shift and go to state 35


state 12

    (31) loop -> UNTIL . LPAREN boolexpr RPAREN block END

    LPAREN          shift and go to state 36


state 13

    (32) loop -> FOR . LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END

    LPAREN          shift and go to state 37


state 14

    (13) statement -> NAME . LPAREN callarg RPAREN
    (14) statement -> NAME . LPAREN RPAREN
    (23) statement -> NAME . AFFECT expression
    (24) statement -> NAME . AFFECT address
    (15) expression -> NAME . LPAREN callarg RPAREN
    (16) expression -> NAME . LPAREN RPAREN
    (43) expression -> NAME . SHORTINCR
    (44) expression -> NAME . SHORTADD expression
    (52) expression -> NAME .

    LPAREN          shift and go to state 38
    AFFECT          shift and go to state 39
    SHORTINCR       shift and go to state 40
    SHORTADD        shift and go to state 41
    SEMICOLON       reduce using rule 52 (expression -> NAME .)
    PLUS            reduce using rule 52 (expression -> NAME .)
    TIMES           reduce using rule 52 (expression -> NAME .)
    MINUS           reduce using rule 52 (expression -> NAME .)
    DIVIDE          reduce using rule 52 (expression -> NAME .)
    OR              reduce using rule 52 (expression -> NAME .)
    AND             reduce using rule 52 (expression -> NAME .)


state 15

    (10) funcdef -> LET . NAME LPAREN declarg RPAREN block END
    (11) funcdef -> LET . NAME LPAREN RPAREN block END

    NAME            shift and go to state 42


state 16

    (12) statement -> RETURN . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 43

state 17

    (25) statement -> VAR . NAME
    (26) statement -> VAR . NAME AFFECT expression
    (27) statement -> VAR . NAME AFFECT address

    NAME            shift and go to state 44


state 18

    (41) expression -> PRINT . LPAREN expression RPAREN

    LPAREN          shift and go to state 45


state 19

    (51) expression -> NUMBER .

    SEMICOLON       reduce using rule 51 (expression -> NUMBER .)
    PLUS            reduce using rule 51 (expression -> NUMBER .)
    TIMES           reduce using rule 51 (expression -> NUMBER .)
    MINUS           reduce using rule 51 (expression -> NUMBER .)
    DIVIDE          reduce using rule 51 (expression -> NUMBER .)
    OR              reduce using rule 51 (expression -> NUMBER .)
    AND             reduce using rule 51 (expression -> NUMBER .)
    RPAREN          reduce using rule 51 (expression -> NUMBER .)
    CAND            reduce using rule 51 (expression -> NUMBER .)
    GT              reduce using rule 51 (expression -> NUMBER .)
    LT              reduce using rule 51 (expression -> NUMBER .)
    LOE             reduce using rule 51 (expression -> NUMBER .)
    GOE             reduce using rule 51 (expression -> NUMBER .)
    EQUALS          reduce using rule 51 (expression -> NUMBER .)
    DIFFERENT       reduce using rule 51 (expression -> NUMBER .)
    COMMA           reduce using rule 51 (expression -> NUMBER .)
    COR             reduce using rule 51 (expression -> NUMBER .)


state 20

    (2) block -> instruction block .

    $end            reduce using rule 2 (block -> instruction block .)
    END             reduce using rule 2 (block -> instruction block .)
    ELSE            reduce using rule 2 (block -> instruction block .)


state 21

    (3) block -> condition block .

    $end            reduce using rule 3 (block -> condition block .)
    END             reduce using rule 3 (block -> condition block .)
    ELSE            reduce using rule 3 (block -> condition block .)


state 22

    (4) block -> loop block .

    $end            reduce using rule 4 (block -> loop block .)
    END             reduce using rule 4 (block -> loop block .)
    ELSE            reduce using rule 4 (block -> loop block .)


state 23

    (5) block -> funcdef block .

    $end            reduce using rule 5 (block -> funcdef block .)
    END             reduce using rule 5 (block -> funcdef block .)
    ELSE            reduce using rule 5 (block -> funcdef block .)


state 24

    (21) instruction -> statement SEMICOLON .

    IF              reduce using rule 21 (instruction -> statement SEMICOLON .)
    WHILE           reduce using rule 21 (instruction -> statement SEMICOLON .)
    UNTIL           reduce using rule 21 (instruction -> statement SEMICOLON .)
    FOR             reduce using rule 21 (instruction -> statement SEMICOLON .)
    LET             reduce using rule 21 (instruction -> statement SEMICOLON .)
    RETURN          reduce using rule 21 (instruction -> statement SEMICOLON .)
    NAME            reduce using rule 21 (instruction -> statement SEMICOLON .)
    VAR             reduce using rule 21 (instruction -> statement SEMICOLON .)
    PRINT           reduce using rule 21 (instruction -> statement SEMICOLON .)
    LPAREN          reduce using rule 21 (instruction -> statement SEMICOLON .)
    NUMBER          reduce using rule 21 (instruction -> statement SEMICOLON .)
    $end            reduce using rule 21 (instruction -> statement SEMICOLON .)
    END             reduce using rule 21 (instruction -> statement SEMICOLON .)
    ELSE            reduce using rule 21 (instruction -> statement SEMICOLON .)


state 25

    (22) instruction -> expression SEMICOLON .

    IF              reduce using rule 22 (instruction -> expression SEMICOLON .)
    WHILE           reduce using rule 22 (instruction -> expression SEMICOLON .)
    UNTIL           reduce using rule 22 (instruction -> expression SEMICOLON .)
    FOR             reduce using rule 22 (instruction -> expression SEMICOLON .)
    LET             reduce using rule 22 (instruction -> expression SEMICOLON .)
    RETURN          reduce using rule 22 (instruction -> expression SEMICOLON .)
    NAME            reduce using rule 22 (instruction -> expression SEMICOLON .)
    VAR             reduce using rule 22 (instruction -> expression SEMICOLON .)
    PRINT           reduce using rule 22 (instruction -> expression SEMICOLON .)
    LPAREN          reduce using rule 22 (instruction -> expression SEMICOLON .)
    NUMBER          reduce using rule 22 (instruction -> expression SEMICOLON .)
    $end            reduce using rule 22 (instruction -> expression SEMICOLON .)
    END             reduce using rule 22 (instruction -> expression SEMICOLON .)
    ELSE            reduce using rule 22 (instruction -> expression SEMICOLON .)


state 26

    (42) expression -> expression PLUS . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 46

state 27

    (45) expression -> expression TIMES . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 47

state 28

    (46) expression -> expression MINUS . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 48

state 29

    (47) expression -> expression DIVIDE . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 49

state 30

    (48) expression -> expression OR . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 50

state 31

    (49) expression -> expression AND . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 51

state 32

    (28) condition -> IF LPAREN . boolexpr RPAREN block END
    (29) condition -> IF LPAREN . boolexpr RPAREN block ELSE block END
    (33) boolexpr -> . boolexpr COR boolexpr
    (34) boolexpr -> . expression CAND expression
    (35) boolexpr -> . expression GT expression
    (36) boolexpr -> . expression LT expression
    (37) boolexpr -> . expression LOE expression
    (38) boolexpr -> . expression GOE expression
    (39) boolexpr -> . expression EQUALS expression
    (40) boolexpr -> . expression DIFFERENT expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    boolexpr                       shift and go to state 52
    expression                     shift and go to state 53

state 33

    (50) expression -> LPAREN expression . RPAREN
    (42) expression -> expression . PLUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . AND expression

    RPAREN          shift and go to state 54
    PLUS            shift and go to state 26
    TIMES           shift and go to state 27
    MINUS           shift and go to state 28
    DIVIDE          shift and go to state 29
    OR              shift and go to state 30
    AND             shift and go to state 31


state 34

    (15) expression -> NAME . LPAREN callarg RPAREN
    (16) expression -> NAME . LPAREN RPAREN
    (43) expression -> NAME . SHORTINCR
    (44) expression -> NAME . SHORTADD expression
    (52) expression -> NAME .

    LPAREN          shift and go to state 55
    SHORTINCR       shift and go to state 40
    SHORTADD        shift and go to state 41
    RPAREN          reduce using rule 52 (expression -> NAME .)
    PLUS            reduce using rule 52 (expression -> NAME .)
    TIMES           reduce using rule 52 (expression -> NAME .)
    MINUS           reduce using rule 52 (expression -> NAME .)
    DIVIDE          reduce using rule 52 (expression -> NAME .)
    OR              reduce using rule 52 (expression -> NAME .)
    AND             reduce using rule 52 (expression -> NAME .)
    SEMICOLON       reduce using rule 52 (expression -> NAME .)
    CAND            reduce using rule 52 (expression -> NAME .)
    GT              reduce using rule 52 (expression -> NAME .)
    LT              reduce using rule 52 (expression -> NAME .)
    LOE             reduce using rule 52 (expression -> NAME .)
    GOE             reduce using rule 52 (expression -> NAME .)
    EQUALS          reduce using rule 52 (expression -> NAME .)
    DIFFERENT       reduce using rule 52 (expression -> NAME .)
    COMMA           reduce using rule 52 (expression -> NAME .)
    COR             reduce using rule 52 (expression -> NAME .)


state 35

    (30) loop -> WHILE LPAREN . boolexpr RPAREN block END
    (33) boolexpr -> . boolexpr COR boolexpr
    (34) boolexpr -> . expression CAND expression
    (35) boolexpr -> . expression GT expression
    (36) boolexpr -> . expression LT expression
    (37) boolexpr -> . expression LOE expression
    (38) boolexpr -> . expression GOE expression
    (39) boolexpr -> . expression EQUALS expression
    (40) boolexpr -> . expression DIFFERENT expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    boolexpr                       shift and go to state 56
    expression                     shift and go to state 53

state 36

    (31) loop -> UNTIL LPAREN . boolexpr RPAREN block END
    (33) boolexpr -> . boolexpr COR boolexpr
    (34) boolexpr -> . expression CAND expression
    (35) boolexpr -> . expression GT expression
    (36) boolexpr -> . expression LT expression
    (37) boolexpr -> . expression LOE expression
    (38) boolexpr -> . expression GOE expression
    (39) boolexpr -> . expression EQUALS expression
    (40) boolexpr -> . expression DIFFERENT expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    boolexpr                       shift and go to state 57
    expression                     shift and go to state 53

state 37

    (32) loop -> FOR LPAREN . NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END

    NAME            shift and go to state 58


state 38

    (13) statement -> NAME LPAREN . callarg RPAREN
    (14) statement -> NAME LPAREN . RPAREN
    (15) expression -> NAME LPAREN . callarg RPAREN
    (16) expression -> NAME LPAREN . RPAREN
    (19) callarg -> . expression COMMA callarg
    (20) callarg -> . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    RPAREN          shift and go to state 60
    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    callarg                        shift and go to state 59
    expression                     shift and go to state 61

state 39

    (23) statement -> NAME AFFECT . expression
    (24) statement -> NAME AFFECT . address
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME
    (53) address -> . REF NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19
    REF             shift and go to state 64

    expression                     shift and go to state 62
    address                        shift and go to state 63

state 40

    (43) expression -> NAME SHORTINCR .

    SEMICOLON       reduce using rule 43 (expression -> NAME SHORTINCR .)
    PLUS            reduce using rule 43 (expression -> NAME SHORTINCR .)
    TIMES           reduce using rule 43 (expression -> NAME SHORTINCR .)
    MINUS           reduce using rule 43 (expression -> NAME SHORTINCR .)
    DIVIDE          reduce using rule 43 (expression -> NAME SHORTINCR .)
    OR              reduce using rule 43 (expression -> NAME SHORTINCR .)
    AND             reduce using rule 43 (expression -> NAME SHORTINCR .)
    RPAREN          reduce using rule 43 (expression -> NAME SHORTINCR .)
    CAND            reduce using rule 43 (expression -> NAME SHORTINCR .)
    GT              reduce using rule 43 (expression -> NAME SHORTINCR .)
    LT              reduce using rule 43 (expression -> NAME SHORTINCR .)
    LOE             reduce using rule 43 (expression -> NAME SHORTINCR .)
    GOE             reduce using rule 43 (expression -> NAME SHORTINCR .)
    EQUALS          reduce using rule 43 (expression -> NAME SHORTINCR .)
    DIFFERENT       reduce using rule 43 (expression -> NAME SHORTINCR .)
    COMMA           reduce using rule 43 (expression -> NAME SHORTINCR .)
    COR             reduce using rule 43 (expression -> NAME SHORTINCR .)


state 41

    (44) expression -> NAME SHORTADD . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 65

state 42

    (10) funcdef -> LET NAME . LPAREN declarg RPAREN block END
    (11) funcdef -> LET NAME . LPAREN RPAREN block END

    LPAREN          shift and go to state 66


state 43

    (12) statement -> RETURN expression .
    (42) expression -> expression . PLUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . AND expression

    SEMICOLON       reduce using rule 12 (statement -> RETURN expression .)
    RPAREN          reduce using rule 12 (statement -> RETURN expression .)
    PLUS            shift and go to state 26
    TIMES           shift and go to state 27
    MINUS           shift and go to state 28
    DIVIDE          shift and go to state 29
    OR              shift and go to state 30
    AND             shift and go to state 31


state 44

    (25) statement -> VAR NAME .
    (26) statement -> VAR NAME . AFFECT expression
    (27) statement -> VAR NAME . AFFECT address

    SEMICOLON       reduce using rule 25 (statement -> VAR NAME .)
    RPAREN          reduce using rule 25 (statement -> VAR NAME .)
    AFFECT          shift and go to state 67


state 45

    (41) expression -> PRINT LPAREN . expression RPAREN
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 68

state 46

    (42) expression -> expression PLUS expression .
    (42) expression -> expression . PLUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . AND expression

    SEMICOLON       reduce using rule 42 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 42 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 42 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 42 (expression -> expression PLUS expression .)
    CAND            reduce using rule 42 (expression -> expression PLUS expression .)
    GT              reduce using rule 42 (expression -> expression PLUS expression .)
    LT              reduce using rule 42 (expression -> expression PLUS expression .)
    LOE             reduce using rule 42 (expression -> expression PLUS expression .)
    GOE             reduce using rule 42 (expression -> expression PLUS expression .)
    EQUALS          reduce using rule 42 (expression -> expression PLUS expression .)
    DIFFERENT       reduce using rule 42 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 42 (expression -> expression PLUS expression .)
    COR             reduce using rule 42 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 29
    OR              shift and go to state 30
    AND             shift and go to state 31

  ! TIMES           [ reduce using rule 42 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 42 (expression -> expression PLUS expression .) ]
  ! OR              [ reduce using rule 42 (expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 42 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 26 ]
  ! MINUS           [ shift and go to state 28 ]


state 47

    (45) expression -> expression TIMES expression .
    (42) expression -> expression . PLUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . AND expression

    SEMICOLON       reduce using rule 45 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 45 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 45 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 45 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 45 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 45 (expression -> expression TIMES expression .)
    CAND            reduce using rule 45 (expression -> expression TIMES expression .)
    GT              reduce using rule 45 (expression -> expression TIMES expression .)
    LT              reduce using rule 45 (expression -> expression TIMES expression .)
    LOE             reduce using rule 45 (expression -> expression TIMES expression .)
    GOE             reduce using rule 45 (expression -> expression TIMES expression .)
    EQUALS          reduce using rule 45 (expression -> expression TIMES expression .)
    DIFFERENT       reduce using rule 45 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 45 (expression -> expression TIMES expression .)
    COR             reduce using rule 45 (expression -> expression TIMES expression .)
    OR              shift and go to state 30
    AND             shift and go to state 31

  ! OR              [ reduce using rule 45 (expression -> expression TIMES expression .) ]
  ! AND             [ reduce using rule 45 (expression -> expression TIMES expression .) ]
  ! PLUS            [ shift and go to state 26 ]
  ! TIMES           [ shift and go to state 27 ]
  ! MINUS           [ shift and go to state 28 ]
  ! DIVIDE          [ shift and go to state 29 ]


state 48

    (46) expression -> expression MINUS expression .
    (42) expression -> expression . PLUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . AND expression

    SEMICOLON       reduce using rule 46 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 46 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 46 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 46 (expression -> expression MINUS expression .)
    CAND            reduce using rule 46 (expression -> expression MINUS expression .)
    GT              reduce using rule 46 (expression -> expression MINUS expression .)
    LT              reduce using rule 46 (expression -> expression MINUS expression .)
    LOE             reduce using rule 46 (expression -> expression MINUS expression .)
    GOE             reduce using rule 46 (expression -> expression MINUS expression .)
    EQUALS          reduce using rule 46 (expression -> expression MINUS expression .)
    DIFFERENT       reduce using rule 46 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 46 (expression -> expression MINUS expression .)
    COR             reduce using rule 46 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 29
    OR              shift and go to state 30
    AND             shift and go to state 31

  ! TIMES           [ reduce using rule 46 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 46 (expression -> expression MINUS expression .) ]
  ! OR              [ reduce using rule 46 (expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 46 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 26 ]
  ! MINUS           [ shift and go to state 28 ]


state 49

    (47) expression -> expression DIVIDE expression .
    (42) expression -> expression . PLUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . AND expression

    SEMICOLON       reduce using rule 47 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 47 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 47 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 47 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 47 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 47 (expression -> expression DIVIDE expression .)
    CAND            reduce using rule 47 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 47 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 47 (expression -> expression DIVIDE expression .)
    LOE             reduce using rule 47 (expression -> expression DIVIDE expression .)
    GOE             reduce using rule 47 (expression -> expression DIVIDE expression .)
    EQUALS          reduce using rule 47 (expression -> expression DIVIDE expression .)
    DIFFERENT       reduce using rule 47 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 47 (expression -> expression DIVIDE expression .)
    COR             reduce using rule 47 (expression -> expression DIVIDE expression .)
    OR              shift and go to state 30
    AND             shift and go to state 31

  ! OR              [ reduce using rule 47 (expression -> expression DIVIDE expression .) ]
  ! AND             [ reduce using rule 47 (expression -> expression DIVIDE expression .) ]
  ! PLUS            [ shift and go to state 26 ]
  ! TIMES           [ shift and go to state 27 ]
  ! MINUS           [ shift and go to state 28 ]
  ! DIVIDE          [ shift and go to state 29 ]


state 50

    (48) expression -> expression OR expression .
    (42) expression -> expression . PLUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . AND expression

    SEMICOLON       reduce using rule 48 (expression -> expression OR expression .)
    PLUS            reduce using rule 48 (expression -> expression OR expression .)
    TIMES           reduce using rule 48 (expression -> expression OR expression .)
    MINUS           reduce using rule 48 (expression -> expression OR expression .)
    DIVIDE          reduce using rule 48 (expression -> expression OR expression .)
    RPAREN          reduce using rule 48 (expression -> expression OR expression .)
    CAND            reduce using rule 48 (expression -> expression OR expression .)
    GT              reduce using rule 48 (expression -> expression OR expression .)
    LT              reduce using rule 48 (expression -> expression OR expression .)
    LOE             reduce using rule 48 (expression -> expression OR expression .)
    GOE             reduce using rule 48 (expression -> expression OR expression .)
    EQUALS          reduce using rule 48 (expression -> expression OR expression .)
    DIFFERENT       reduce using rule 48 (expression -> expression OR expression .)
    COMMA           reduce using rule 48 (expression -> expression OR expression .)
    COR             reduce using rule 48 (expression -> expression OR expression .)
    OR              shift and go to state 30
    AND             shift and go to state 31

  ! OR              [ reduce using rule 48 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 48 (expression -> expression OR expression .) ]
  ! PLUS            [ shift and go to state 26 ]
  ! TIMES           [ shift and go to state 27 ]
  ! MINUS           [ shift and go to state 28 ]
  ! DIVIDE          [ shift and go to state 29 ]


state 51

    (49) expression -> expression AND expression .
    (42) expression -> expression . PLUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . AND expression

    SEMICOLON       reduce using rule 49 (expression -> expression AND expression .)
    PLUS            reduce using rule 49 (expression -> expression AND expression .)
    TIMES           reduce using rule 49 (expression -> expression AND expression .)
    MINUS           reduce using rule 49 (expression -> expression AND expression .)
    DIVIDE          reduce using rule 49 (expression -> expression AND expression .)
    RPAREN          reduce using rule 49 (expression -> expression AND expression .)
    CAND            reduce using rule 49 (expression -> expression AND expression .)
    GT              reduce using rule 49 (expression -> expression AND expression .)
    LT              reduce using rule 49 (expression -> expression AND expression .)
    LOE             reduce using rule 49 (expression -> expression AND expression .)
    GOE             reduce using rule 49 (expression -> expression AND expression .)
    EQUALS          reduce using rule 49 (expression -> expression AND expression .)
    DIFFERENT       reduce using rule 49 (expression -> expression AND expression .)
    COMMA           reduce using rule 49 (expression -> expression AND expression .)
    COR             reduce using rule 49 (expression -> expression AND expression .)
    OR              shift and go to state 30
    AND             shift and go to state 31

  ! OR              [ reduce using rule 49 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 49 (expression -> expression AND expression .) ]
  ! PLUS            [ shift and go to state 26 ]
  ! TIMES           [ shift and go to state 27 ]
  ! MINUS           [ shift and go to state 28 ]
  ! DIVIDE          [ shift and go to state 29 ]


state 52

    (28) condition -> IF LPAREN boolexpr . RPAREN block END
    (29) condition -> IF LPAREN boolexpr . RPAREN block ELSE block END
    (33) boolexpr -> boolexpr . COR boolexpr

    RPAREN          shift and go to state 69
    COR             shift and go to state 70


state 53

    (34) boolexpr -> expression . CAND expression
    (35) boolexpr -> expression . GT expression
    (36) boolexpr -> expression . LT expression
    (37) boolexpr -> expression . LOE expression
    (38) boolexpr -> expression . GOE expression
    (39) boolexpr -> expression . EQUALS expression
    (40) boolexpr -> expression . DIFFERENT expression
    (42) expression -> expression . PLUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . AND expression

    CAND            shift and go to state 71
    GT              shift and go to state 72
    LT              shift and go to state 73
    LOE             shift and go to state 74
    GOE             shift and go to state 75
    EQUALS          shift and go to state 76
    DIFFERENT       shift and go to state 77
    PLUS            shift and go to state 26
    TIMES           shift and go to state 27
    MINUS           shift and go to state 28
    DIVIDE          shift and go to state 29
    OR              shift and go to state 30
    AND             shift and go to state 31


state 54

    (50) expression -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    CAND            reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    LOE             reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    GOE             reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    DIFFERENT       reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    COR             reduce using rule 50 (expression -> LPAREN expression RPAREN .)


state 55

    (15) expression -> NAME LPAREN . callarg RPAREN
    (16) expression -> NAME LPAREN . RPAREN
    (19) callarg -> . expression COMMA callarg
    (20) callarg -> . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    RPAREN          shift and go to state 79
    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    callarg                        shift and go to state 78
    expression                     shift and go to state 61

state 56

    (30) loop -> WHILE LPAREN boolexpr . RPAREN block END
    (33) boolexpr -> boolexpr . COR boolexpr

    RPAREN          shift and go to state 80
    COR             shift and go to state 70


state 57

    (31) loop -> UNTIL LPAREN boolexpr . RPAREN block END
    (33) boolexpr -> boolexpr . COR boolexpr

    RPAREN          shift and go to state 81
    COR             shift and go to state 70


state 58

    (32) loop -> FOR LPAREN NAME . SEMICOLON boolexpr SEMICOLON statement RPAREN block END

    SEMICOLON       shift and go to state 82


state 59

    (13) statement -> NAME LPAREN callarg . RPAREN
    (15) expression -> NAME LPAREN callarg . RPAREN

    RPAREN          shift and go to state 83


state 60

    (14) statement -> NAME LPAREN RPAREN .
    (16) expression -> NAME LPAREN RPAREN .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 14 (statement -> NAME LPAREN RPAREN .)
    SEMICOLON       reduce using rule 14 (statement -> NAME LPAREN RPAREN .)
    PLUS            reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    TIMES           reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    MINUS           reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    DIVIDE          reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    OR              reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    AND             reduce using rule 16 (expression -> NAME LPAREN RPAREN .)

  ! SEMICOLON       [ reduce using rule 16 (expression -> NAME LPAREN RPAREN .) ]


state 61

    (19) callarg -> expression . COMMA callarg
    (20) callarg -> expression .
    (42) expression -> expression . PLUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . AND expression

    COMMA           shift and go to state 84
    RPAREN          reduce using rule 20 (callarg -> expression .)
    PLUS            shift and go to state 26
    TIMES           shift and go to state 27
    MINUS           shift and go to state 28
    DIVIDE          shift and go to state 29
    OR              shift and go to state 30
    AND             shift and go to state 31


state 62

    (23) statement -> NAME AFFECT expression .
    (42) expression -> expression . PLUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . AND expression

    SEMICOLON       reduce using rule 23 (statement -> NAME AFFECT expression .)
    RPAREN          reduce using rule 23 (statement -> NAME AFFECT expression .)
    PLUS            shift and go to state 26
    TIMES           shift and go to state 27
    MINUS           shift and go to state 28
    DIVIDE          shift and go to state 29
    OR              shift and go to state 30
    AND             shift and go to state 31


state 63

    (24) statement -> NAME AFFECT address .

    SEMICOLON       reduce using rule 24 (statement -> NAME AFFECT address .)
    RPAREN          reduce using rule 24 (statement -> NAME AFFECT address .)


state 64

    (53) address -> REF . NAME

    NAME            shift and go to state 85


state 65

    (44) expression -> NAME SHORTADD expression .
    (42) expression -> expression . PLUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . AND expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMICOLON       reduce using rule 44 (expression -> NAME SHORTADD expression .)
    RPAREN          reduce using rule 44 (expression -> NAME SHORTADD expression .)
    CAND            reduce using rule 44 (expression -> NAME SHORTADD expression .)
    GT              reduce using rule 44 (expression -> NAME SHORTADD expression .)
    LT              reduce using rule 44 (expression -> NAME SHORTADD expression .)
    LOE             reduce using rule 44 (expression -> NAME SHORTADD expression .)
    GOE             reduce using rule 44 (expression -> NAME SHORTADD expression .)
    EQUALS          reduce using rule 44 (expression -> NAME SHORTADD expression .)
    DIFFERENT       reduce using rule 44 (expression -> NAME SHORTADD expression .)
    COMMA           reduce using rule 44 (expression -> NAME SHORTADD expression .)
    COR             reduce using rule 44 (expression -> NAME SHORTADD expression .)
    PLUS            shift and go to state 26
    TIMES           shift and go to state 27
    MINUS           shift and go to state 28
    DIVIDE          shift and go to state 29
    OR              shift and go to state 30
    AND             shift and go to state 31

  ! PLUS            [ reduce using rule 44 (expression -> NAME SHORTADD expression .) ]
  ! TIMES           [ reduce using rule 44 (expression -> NAME SHORTADD expression .) ]
  ! MINUS           [ reduce using rule 44 (expression -> NAME SHORTADD expression .) ]
  ! DIVIDE          [ reduce using rule 44 (expression -> NAME SHORTADD expression .) ]
  ! OR              [ reduce using rule 44 (expression -> NAME SHORTADD expression .) ]
  ! AND             [ reduce using rule 44 (expression -> NAME SHORTADD expression .) ]


state 66

    (10) funcdef -> LET NAME LPAREN . declarg RPAREN block END
    (11) funcdef -> LET NAME LPAREN . RPAREN block END
    (17) declarg -> . NAME COMMA declarg
    (18) declarg -> . NAME

    RPAREN          shift and go to state 88
    NAME            shift and go to state 86

    declarg                        shift and go to state 87

state 67

    (26) statement -> VAR NAME AFFECT . expression
    (27) statement -> VAR NAME AFFECT . address
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME
    (53) address -> . REF NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19
    REF             shift and go to state 64

    expression                     shift and go to state 89
    address                        shift and go to state 90

state 68

    (41) expression -> PRINT LPAREN expression . RPAREN
    (42) expression -> expression . PLUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . AND expression

    RPAREN          shift and go to state 91
    PLUS            shift and go to state 26
    TIMES           shift and go to state 27
    MINUS           shift and go to state 28
    DIVIDE          shift and go to state 29
    OR              shift and go to state 30
    AND             shift and go to state 31


state 69

    (28) condition -> IF LPAREN boolexpr RPAREN . block END
    (29) condition -> IF LPAREN boolexpr RPAREN . block ELSE block END
    (2) block -> . instruction block
    (3) block -> . condition block
    (4) block -> . loop block
    (5) block -> . funcdef block
    (6) block -> . instruction
    (7) block -> . condition
    (8) block -> . loop
    (9) block -> . funcdef
    (21) instruction -> . statement SEMICOLON
    (22) instruction -> . expression SEMICOLON
    (28) condition -> . IF LPAREN boolexpr RPAREN block END
    (29) condition -> . IF LPAREN boolexpr RPAREN block ELSE block END
    (30) loop -> . WHILE LPAREN boolexpr RPAREN block END
    (31) loop -> . UNTIL LPAREN boolexpr RPAREN block END
    (32) loop -> . FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END
    (10) funcdef -> . LET NAME LPAREN declarg RPAREN block END
    (11) funcdef -> . LET NAME LPAREN RPAREN block END
    (12) statement -> . RETURN expression
    (13) statement -> . NAME LPAREN callarg RPAREN
    (14) statement -> . NAME LPAREN RPAREN
    (23) statement -> . NAME AFFECT expression
    (24) statement -> . NAME AFFECT address
    (25) statement -> . VAR NAME
    (26) statement -> . VAR NAME AFFECT expression
    (27) statement -> . VAR NAME AFFECT address
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    IF              shift and go to state 9
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 12
    FOR             shift and go to state 13
    LET             shift and go to state 15
    RETURN          shift and go to state 16
    NAME            shift and go to state 14
    VAR             shift and go to state 17
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    block                          shift and go to state 92
    instruction                    shift and go to state 3
    condition                      shift and go to state 4
    loop                           shift and go to state 5
    funcdef                        shift and go to state 6
    statement                      shift and go to state 7
    expression                     shift and go to state 8

state 70

    (33) boolexpr -> boolexpr COR . boolexpr
    (33) boolexpr -> . boolexpr COR boolexpr
    (34) boolexpr -> . expression CAND expression
    (35) boolexpr -> . expression GT expression
    (36) boolexpr -> . expression LT expression
    (37) boolexpr -> . expression LOE expression
    (38) boolexpr -> . expression GOE expression
    (39) boolexpr -> . expression EQUALS expression
    (40) boolexpr -> . expression DIFFERENT expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    boolexpr                       shift and go to state 93
    expression                     shift and go to state 53

state 71

    (34) boolexpr -> expression CAND . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 94

state 72

    (35) boolexpr -> expression GT . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 95

state 73

    (36) boolexpr -> expression LT . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 96

state 74

    (37) boolexpr -> expression LOE . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 97

state 75

    (38) boolexpr -> expression GOE . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 98

state 76

    (39) boolexpr -> expression EQUALS . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 99

state 77

    (40) boolexpr -> expression DIFFERENT . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 100

state 78

    (15) expression -> NAME LPAREN callarg . RPAREN

    RPAREN          shift and go to state 101


state 79

    (16) expression -> NAME LPAREN RPAREN .

    RPAREN          reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    PLUS            reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    TIMES           reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    MINUS           reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    DIVIDE          reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    OR              reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    AND             reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    SEMICOLON       reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    CAND            reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    GT              reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    LT              reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    LOE             reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    GOE             reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    EQUALS          reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    DIFFERENT       reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    COMMA           reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    COR             reduce using rule 16 (expression -> NAME LPAREN RPAREN .)


state 80

    (30) loop -> WHILE LPAREN boolexpr RPAREN . block END
    (2) block -> . instruction block
    (3) block -> . condition block
    (4) block -> . loop block
    (5) block -> . funcdef block
    (6) block -> . instruction
    (7) block -> . condition
    (8) block -> . loop
    (9) block -> . funcdef
    (21) instruction -> . statement SEMICOLON
    (22) instruction -> . expression SEMICOLON
    (28) condition -> . IF LPAREN boolexpr RPAREN block END
    (29) condition -> . IF LPAREN boolexpr RPAREN block ELSE block END
    (30) loop -> . WHILE LPAREN boolexpr RPAREN block END
    (31) loop -> . UNTIL LPAREN boolexpr RPAREN block END
    (32) loop -> . FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END
    (10) funcdef -> . LET NAME LPAREN declarg RPAREN block END
    (11) funcdef -> . LET NAME LPAREN RPAREN block END
    (12) statement -> . RETURN expression
    (13) statement -> . NAME LPAREN callarg RPAREN
    (14) statement -> . NAME LPAREN RPAREN
    (23) statement -> . NAME AFFECT expression
    (24) statement -> . NAME AFFECT address
    (25) statement -> . VAR NAME
    (26) statement -> . VAR NAME AFFECT expression
    (27) statement -> . VAR NAME AFFECT address
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    IF              shift and go to state 9
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 12
    FOR             shift and go to state 13
    LET             shift and go to state 15
    RETURN          shift and go to state 16
    NAME            shift and go to state 14
    VAR             shift and go to state 17
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    block                          shift and go to state 102
    instruction                    shift and go to state 3
    condition                      shift and go to state 4
    loop                           shift and go to state 5
    funcdef                        shift and go to state 6
    statement                      shift and go to state 7
    expression                     shift and go to state 8

state 81

    (31) loop -> UNTIL LPAREN boolexpr RPAREN . block END
    (2) block -> . instruction block
    (3) block -> . condition block
    (4) block -> . loop block
    (5) block -> . funcdef block
    (6) block -> . instruction
    (7) block -> . condition
    (8) block -> . loop
    (9) block -> . funcdef
    (21) instruction -> . statement SEMICOLON
    (22) instruction -> . expression SEMICOLON
    (28) condition -> . IF LPAREN boolexpr RPAREN block END
    (29) condition -> . IF LPAREN boolexpr RPAREN block ELSE block END
    (30) loop -> . WHILE LPAREN boolexpr RPAREN block END
    (31) loop -> . UNTIL LPAREN boolexpr RPAREN block END
    (32) loop -> . FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END
    (10) funcdef -> . LET NAME LPAREN declarg RPAREN block END
    (11) funcdef -> . LET NAME LPAREN RPAREN block END
    (12) statement -> . RETURN expression
    (13) statement -> . NAME LPAREN callarg RPAREN
    (14) statement -> . NAME LPAREN RPAREN
    (23) statement -> . NAME AFFECT expression
    (24) statement -> . NAME AFFECT address
    (25) statement -> . VAR NAME
    (26) statement -> . VAR NAME AFFECT expression
    (27) statement -> . VAR NAME AFFECT address
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    IF              shift and go to state 9
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 12
    FOR             shift and go to state 13
    LET             shift and go to state 15
    RETURN          shift and go to state 16
    NAME            shift and go to state 14
    VAR             shift and go to state 17
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    block                          shift and go to state 103
    instruction                    shift and go to state 3
    condition                      shift and go to state 4
    loop                           shift and go to state 5
    funcdef                        shift and go to state 6
    statement                      shift and go to state 7
    expression                     shift and go to state 8

state 82

    (32) loop -> FOR LPAREN NAME SEMICOLON . boolexpr SEMICOLON statement RPAREN block END
    (33) boolexpr -> . boolexpr COR boolexpr
    (34) boolexpr -> . expression CAND expression
    (35) boolexpr -> . expression GT expression
    (36) boolexpr -> . expression LT expression
    (37) boolexpr -> . expression LOE expression
    (38) boolexpr -> . expression GOE expression
    (39) boolexpr -> . expression EQUALS expression
    (40) boolexpr -> . expression DIFFERENT expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    boolexpr                       shift and go to state 104
    expression                     shift and go to state 53

state 83

    (13) statement -> NAME LPAREN callarg RPAREN .
    (15) expression -> NAME LPAREN callarg RPAREN .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 13 (statement -> NAME LPAREN callarg RPAREN .)
    SEMICOLON       reduce using rule 13 (statement -> NAME LPAREN callarg RPAREN .)
    PLUS            reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    TIMES           reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    MINUS           reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    DIVIDE          reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    OR              reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    AND             reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)

  ! SEMICOLON       [ reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .) ]


state 84

    (19) callarg -> expression COMMA . callarg
    (19) callarg -> . expression COMMA callarg
    (20) callarg -> . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 61
    callarg                        shift and go to state 105

state 85

    (53) address -> REF NAME .

    SEMICOLON       reduce using rule 53 (address -> REF NAME .)
    RPAREN          reduce using rule 53 (address -> REF NAME .)


state 86

    (17) declarg -> NAME . COMMA declarg
    (18) declarg -> NAME .

    COMMA           shift and go to state 106
    RPAREN          reduce using rule 18 (declarg -> NAME .)


state 87

    (10) funcdef -> LET NAME LPAREN declarg . RPAREN block END

    RPAREN          shift and go to state 107


state 88

    (11) funcdef -> LET NAME LPAREN RPAREN . block END
    (2) block -> . instruction block
    (3) block -> . condition block
    (4) block -> . loop block
    (5) block -> . funcdef block
    (6) block -> . instruction
    (7) block -> . condition
    (8) block -> . loop
    (9) block -> . funcdef
    (21) instruction -> . statement SEMICOLON
    (22) instruction -> . expression SEMICOLON
    (28) condition -> . IF LPAREN boolexpr RPAREN block END
    (29) condition -> . IF LPAREN boolexpr RPAREN block ELSE block END
    (30) loop -> . WHILE LPAREN boolexpr RPAREN block END
    (31) loop -> . UNTIL LPAREN boolexpr RPAREN block END
    (32) loop -> . FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END
    (10) funcdef -> . LET NAME LPAREN declarg RPAREN block END
    (11) funcdef -> . LET NAME LPAREN RPAREN block END
    (12) statement -> . RETURN expression
    (13) statement -> . NAME LPAREN callarg RPAREN
    (14) statement -> . NAME LPAREN RPAREN
    (23) statement -> . NAME AFFECT expression
    (24) statement -> . NAME AFFECT address
    (25) statement -> . VAR NAME
    (26) statement -> . VAR NAME AFFECT expression
    (27) statement -> . VAR NAME AFFECT address
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    IF              shift and go to state 9
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 12
    FOR             shift and go to state 13
    LET             shift and go to state 15
    RETURN          shift and go to state 16
    NAME            shift and go to state 14
    VAR             shift and go to state 17
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    block                          shift and go to state 108
    instruction                    shift and go to state 3
    condition                      shift and go to state 4
    loop                           shift and go to state 5
    funcdef                        shift and go to state 6
    statement                      shift and go to state 7
    expression                     shift and go to state 8

state 89

    (26) statement -> VAR NAME AFFECT expression .
    (42) expression -> expression . PLUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . AND expression

    SEMICOLON       reduce using rule 26 (statement -> VAR NAME AFFECT expression .)
    RPAREN          reduce using rule 26 (statement -> VAR NAME AFFECT expression .)
    PLUS            shift and go to state 26
    TIMES           shift and go to state 27
    MINUS           shift and go to state 28
    DIVIDE          shift and go to state 29
    OR              shift and go to state 30
    AND             shift and go to state 31


state 90

    (27) statement -> VAR NAME AFFECT address .

    SEMICOLON       reduce using rule 27 (statement -> VAR NAME AFFECT address .)
    RPAREN          reduce using rule 27 (statement -> VAR NAME AFFECT address .)


state 91

    (41) expression -> PRINT LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 41 (expression -> PRINT LPAREN expression RPAREN .)
    PLUS            reduce using rule 41 (expression -> PRINT LPAREN expression RPAREN .)
    TIMES           reduce using rule 41 (expression -> PRINT LPAREN expression RPAREN .)
    MINUS           reduce using rule 41 (expression -> PRINT LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 41 (expression -> PRINT LPAREN expression RPAREN .)
    OR              reduce using rule 41 (expression -> PRINT LPAREN expression RPAREN .)
    AND             reduce using rule 41 (expression -> PRINT LPAREN expression RPAREN .)
    RPAREN          reduce using rule 41 (expression -> PRINT LPAREN expression RPAREN .)
    CAND            reduce using rule 41 (expression -> PRINT LPAREN expression RPAREN .)
    GT              reduce using rule 41 (expression -> PRINT LPAREN expression RPAREN .)
    LT              reduce using rule 41 (expression -> PRINT LPAREN expression RPAREN .)
    LOE             reduce using rule 41 (expression -> PRINT LPAREN expression RPAREN .)
    GOE             reduce using rule 41 (expression -> PRINT LPAREN expression RPAREN .)
    EQUALS          reduce using rule 41 (expression -> PRINT LPAREN expression RPAREN .)
    DIFFERENT       reduce using rule 41 (expression -> PRINT LPAREN expression RPAREN .)
    COMMA           reduce using rule 41 (expression -> PRINT LPAREN expression RPAREN .)
    COR             reduce using rule 41 (expression -> PRINT LPAREN expression RPAREN .)


state 92

    (28) condition -> IF LPAREN boolexpr RPAREN block . END
    (29) condition -> IF LPAREN boolexpr RPAREN block . ELSE block END

    END             shift and go to state 109
    ELSE            shift and go to state 110


state 93

    (33) boolexpr -> boolexpr COR boolexpr .
    (33) boolexpr -> boolexpr . COR boolexpr

  ! shift/reduce conflict for COR resolved as shift
    RPAREN          reduce using rule 33 (boolexpr -> boolexpr COR boolexpr .)
    SEMICOLON       reduce using rule 33 (boolexpr -> boolexpr COR boolexpr .)
    COR             shift and go to state 70

  ! COR             [ reduce using rule 33 (boolexpr -> boolexpr COR boolexpr .) ]


state 94

    (34) boolexpr -> expression CAND expression .
    (42) expression -> expression . PLUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . AND expression

    RPAREN          reduce using rule 34 (boolexpr -> expression CAND expression .)
    COR             reduce using rule 34 (boolexpr -> expression CAND expression .)
    SEMICOLON       reduce using rule 34 (boolexpr -> expression CAND expression .)
    PLUS            shift and go to state 26
    TIMES           shift and go to state 27
    MINUS           shift and go to state 28
    DIVIDE          shift and go to state 29
    OR              shift and go to state 30
    AND             shift and go to state 31


state 95

    (35) boolexpr -> expression GT expression .
    (42) expression -> expression . PLUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . AND expression

    RPAREN          reduce using rule 35 (boolexpr -> expression GT expression .)
    COR             reduce using rule 35 (boolexpr -> expression GT expression .)
    SEMICOLON       reduce using rule 35 (boolexpr -> expression GT expression .)
    PLUS            shift and go to state 26
    TIMES           shift and go to state 27
    MINUS           shift and go to state 28
    DIVIDE          shift and go to state 29
    OR              shift and go to state 30
    AND             shift and go to state 31


state 96

    (36) boolexpr -> expression LT expression .
    (42) expression -> expression . PLUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . AND expression

    RPAREN          reduce using rule 36 (boolexpr -> expression LT expression .)
    COR             reduce using rule 36 (boolexpr -> expression LT expression .)
    SEMICOLON       reduce using rule 36 (boolexpr -> expression LT expression .)
    PLUS            shift and go to state 26
    TIMES           shift and go to state 27
    MINUS           shift and go to state 28
    DIVIDE          shift and go to state 29
    OR              shift and go to state 30
    AND             shift and go to state 31


state 97

    (37) boolexpr -> expression LOE expression .
    (42) expression -> expression . PLUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . AND expression

    RPAREN          reduce using rule 37 (boolexpr -> expression LOE expression .)
    COR             reduce using rule 37 (boolexpr -> expression LOE expression .)
    SEMICOLON       reduce using rule 37 (boolexpr -> expression LOE expression .)
    PLUS            shift and go to state 26
    TIMES           shift and go to state 27
    MINUS           shift and go to state 28
    DIVIDE          shift and go to state 29
    OR              shift and go to state 30
    AND             shift and go to state 31


state 98

    (38) boolexpr -> expression GOE expression .
    (42) expression -> expression . PLUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . AND expression

    RPAREN          reduce using rule 38 (boolexpr -> expression GOE expression .)
    COR             reduce using rule 38 (boolexpr -> expression GOE expression .)
    SEMICOLON       reduce using rule 38 (boolexpr -> expression GOE expression .)
    PLUS            shift and go to state 26
    TIMES           shift and go to state 27
    MINUS           shift and go to state 28
    DIVIDE          shift and go to state 29
    OR              shift and go to state 30
    AND             shift and go to state 31


state 99

    (39) boolexpr -> expression EQUALS expression .
    (42) expression -> expression . PLUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . AND expression

    RPAREN          reduce using rule 39 (boolexpr -> expression EQUALS expression .)
    COR             reduce using rule 39 (boolexpr -> expression EQUALS expression .)
    SEMICOLON       reduce using rule 39 (boolexpr -> expression EQUALS expression .)
    PLUS            shift and go to state 26
    TIMES           shift and go to state 27
    MINUS           shift and go to state 28
    DIVIDE          shift and go to state 29
    OR              shift and go to state 30
    AND             shift and go to state 31


state 100

    (40) boolexpr -> expression DIFFERENT expression .
    (42) expression -> expression . PLUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . AND expression

    RPAREN          reduce using rule 40 (boolexpr -> expression DIFFERENT expression .)
    COR             reduce using rule 40 (boolexpr -> expression DIFFERENT expression .)
    SEMICOLON       reduce using rule 40 (boolexpr -> expression DIFFERENT expression .)
    PLUS            shift and go to state 26
    TIMES           shift and go to state 27
    MINUS           shift and go to state 28
    DIVIDE          shift and go to state 29
    OR              shift and go to state 30
    AND             shift and go to state 31


state 101

    (15) expression -> NAME LPAREN callarg RPAREN .

    RPAREN          reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    PLUS            reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    TIMES           reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    MINUS           reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    DIVIDE          reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    OR              reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    AND             reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    SEMICOLON       reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    CAND            reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    GT              reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    LT              reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    LOE             reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    GOE             reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    EQUALS          reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    DIFFERENT       reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    COMMA           reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    COR             reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)


state 102

    (30) loop -> WHILE LPAREN boolexpr RPAREN block . END

    END             shift and go to state 111


state 103

    (31) loop -> UNTIL LPAREN boolexpr RPAREN block . END

    END             shift and go to state 112


state 104

    (32) loop -> FOR LPAREN NAME SEMICOLON boolexpr . SEMICOLON statement RPAREN block END
    (33) boolexpr -> boolexpr . COR boolexpr

    SEMICOLON       shift and go to state 113
    COR             shift and go to state 70


state 105

    (19) callarg -> expression COMMA callarg .

    RPAREN          reduce using rule 19 (callarg -> expression COMMA callarg .)


state 106

    (17) declarg -> NAME COMMA . declarg
    (17) declarg -> . NAME COMMA declarg
    (18) declarg -> . NAME

    NAME            shift and go to state 86

    declarg                        shift and go to state 114

state 107

    (10) funcdef -> LET NAME LPAREN declarg RPAREN . block END
    (2) block -> . instruction block
    (3) block -> . condition block
    (4) block -> . loop block
    (5) block -> . funcdef block
    (6) block -> . instruction
    (7) block -> . condition
    (8) block -> . loop
    (9) block -> . funcdef
    (21) instruction -> . statement SEMICOLON
    (22) instruction -> . expression SEMICOLON
    (28) condition -> . IF LPAREN boolexpr RPAREN block END
    (29) condition -> . IF LPAREN boolexpr RPAREN block ELSE block END
    (30) loop -> . WHILE LPAREN boolexpr RPAREN block END
    (31) loop -> . UNTIL LPAREN boolexpr RPAREN block END
    (32) loop -> . FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END
    (10) funcdef -> . LET NAME LPAREN declarg RPAREN block END
    (11) funcdef -> . LET NAME LPAREN RPAREN block END
    (12) statement -> . RETURN expression
    (13) statement -> . NAME LPAREN callarg RPAREN
    (14) statement -> . NAME LPAREN RPAREN
    (23) statement -> . NAME AFFECT expression
    (24) statement -> . NAME AFFECT address
    (25) statement -> . VAR NAME
    (26) statement -> . VAR NAME AFFECT expression
    (27) statement -> . VAR NAME AFFECT address
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    IF              shift and go to state 9
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 12
    FOR             shift and go to state 13
    LET             shift and go to state 15
    RETURN          shift and go to state 16
    NAME            shift and go to state 14
    VAR             shift and go to state 17
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    block                          shift and go to state 115
    instruction                    shift and go to state 3
    condition                      shift and go to state 4
    loop                           shift and go to state 5
    funcdef                        shift and go to state 6
    statement                      shift and go to state 7
    expression                     shift and go to state 8

state 108

    (11) funcdef -> LET NAME LPAREN RPAREN block . END

    END             shift and go to state 116


state 109

    (28) condition -> IF LPAREN boolexpr RPAREN block END .

    IF              reduce using rule 28 (condition -> IF LPAREN boolexpr RPAREN block END .)
    WHILE           reduce using rule 28 (condition -> IF LPAREN boolexpr RPAREN block END .)
    UNTIL           reduce using rule 28 (condition -> IF LPAREN boolexpr RPAREN block END .)
    FOR             reduce using rule 28 (condition -> IF LPAREN boolexpr RPAREN block END .)
    LET             reduce using rule 28 (condition -> IF LPAREN boolexpr RPAREN block END .)
    RETURN          reduce using rule 28 (condition -> IF LPAREN boolexpr RPAREN block END .)
    NAME            reduce using rule 28 (condition -> IF LPAREN boolexpr RPAREN block END .)
    VAR             reduce using rule 28 (condition -> IF LPAREN boolexpr RPAREN block END .)
    PRINT           reduce using rule 28 (condition -> IF LPAREN boolexpr RPAREN block END .)
    LPAREN          reduce using rule 28 (condition -> IF LPAREN boolexpr RPAREN block END .)
    NUMBER          reduce using rule 28 (condition -> IF LPAREN boolexpr RPAREN block END .)
    $end            reduce using rule 28 (condition -> IF LPAREN boolexpr RPAREN block END .)
    END             reduce using rule 28 (condition -> IF LPAREN boolexpr RPAREN block END .)
    ELSE            reduce using rule 28 (condition -> IF LPAREN boolexpr RPAREN block END .)


state 110

    (29) condition -> IF LPAREN boolexpr RPAREN block ELSE . block END
    (2) block -> . instruction block
    (3) block -> . condition block
    (4) block -> . loop block
    (5) block -> . funcdef block
    (6) block -> . instruction
    (7) block -> . condition
    (8) block -> . loop
    (9) block -> . funcdef
    (21) instruction -> . statement SEMICOLON
    (22) instruction -> . expression SEMICOLON
    (28) condition -> . IF LPAREN boolexpr RPAREN block END
    (29) condition -> . IF LPAREN boolexpr RPAREN block ELSE block END
    (30) loop -> . WHILE LPAREN boolexpr RPAREN block END
    (31) loop -> . UNTIL LPAREN boolexpr RPAREN block END
    (32) loop -> . FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END
    (10) funcdef -> . LET NAME LPAREN declarg RPAREN block END
    (11) funcdef -> . LET NAME LPAREN RPAREN block END
    (12) statement -> . RETURN expression
    (13) statement -> . NAME LPAREN callarg RPAREN
    (14) statement -> . NAME LPAREN RPAREN
    (23) statement -> . NAME AFFECT expression
    (24) statement -> . NAME AFFECT address
    (25) statement -> . VAR NAME
    (26) statement -> . VAR NAME AFFECT expression
    (27) statement -> . VAR NAME AFFECT address
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    IF              shift and go to state 9
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 12
    FOR             shift and go to state 13
    LET             shift and go to state 15
    RETURN          shift and go to state 16
    NAME            shift and go to state 14
    VAR             shift and go to state 17
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    block                          shift and go to state 117
    instruction                    shift and go to state 3
    condition                      shift and go to state 4
    loop                           shift and go to state 5
    funcdef                        shift and go to state 6
    statement                      shift and go to state 7
    expression                     shift and go to state 8

state 111

    (30) loop -> WHILE LPAREN boolexpr RPAREN block END .

    IF              reduce using rule 30 (loop -> WHILE LPAREN boolexpr RPAREN block END .)
    WHILE           reduce using rule 30 (loop -> WHILE LPAREN boolexpr RPAREN block END .)
    UNTIL           reduce using rule 30 (loop -> WHILE LPAREN boolexpr RPAREN block END .)
    FOR             reduce using rule 30 (loop -> WHILE LPAREN boolexpr RPAREN block END .)
    LET             reduce using rule 30 (loop -> WHILE LPAREN boolexpr RPAREN block END .)
    RETURN          reduce using rule 30 (loop -> WHILE LPAREN boolexpr RPAREN block END .)
    NAME            reduce using rule 30 (loop -> WHILE LPAREN boolexpr RPAREN block END .)
    VAR             reduce using rule 30 (loop -> WHILE LPAREN boolexpr RPAREN block END .)
    PRINT           reduce using rule 30 (loop -> WHILE LPAREN boolexpr RPAREN block END .)
    LPAREN          reduce using rule 30 (loop -> WHILE LPAREN boolexpr RPAREN block END .)
    NUMBER          reduce using rule 30 (loop -> WHILE LPAREN boolexpr RPAREN block END .)
    $end            reduce using rule 30 (loop -> WHILE LPAREN boolexpr RPAREN block END .)
    END             reduce using rule 30 (loop -> WHILE LPAREN boolexpr RPAREN block END .)
    ELSE            reduce using rule 30 (loop -> WHILE LPAREN boolexpr RPAREN block END .)


state 112

    (31) loop -> UNTIL LPAREN boolexpr RPAREN block END .

    IF              reduce using rule 31 (loop -> UNTIL LPAREN boolexpr RPAREN block END .)
    WHILE           reduce using rule 31 (loop -> UNTIL LPAREN boolexpr RPAREN block END .)
    UNTIL           reduce using rule 31 (loop -> UNTIL LPAREN boolexpr RPAREN block END .)
    FOR             reduce using rule 31 (loop -> UNTIL LPAREN boolexpr RPAREN block END .)
    LET             reduce using rule 31 (loop -> UNTIL LPAREN boolexpr RPAREN block END .)
    RETURN          reduce using rule 31 (loop -> UNTIL LPAREN boolexpr RPAREN block END .)
    NAME            reduce using rule 31 (loop -> UNTIL LPAREN boolexpr RPAREN block END .)
    VAR             reduce using rule 31 (loop -> UNTIL LPAREN boolexpr RPAREN block END .)
    PRINT           reduce using rule 31 (loop -> UNTIL LPAREN boolexpr RPAREN block END .)
    LPAREN          reduce using rule 31 (loop -> UNTIL LPAREN boolexpr RPAREN block END .)
    NUMBER          reduce using rule 31 (loop -> UNTIL LPAREN boolexpr RPAREN block END .)
    $end            reduce using rule 31 (loop -> UNTIL LPAREN boolexpr RPAREN block END .)
    END             reduce using rule 31 (loop -> UNTIL LPAREN boolexpr RPAREN block END .)
    ELSE            reduce using rule 31 (loop -> UNTIL LPAREN boolexpr RPAREN block END .)


state 113

    (32) loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON . statement RPAREN block END
    (12) statement -> . RETURN expression
    (13) statement -> . NAME LPAREN callarg RPAREN
    (14) statement -> . NAME LPAREN RPAREN
    (23) statement -> . NAME AFFECT expression
    (24) statement -> . NAME AFFECT address
    (25) statement -> . VAR NAME
    (26) statement -> . VAR NAME AFFECT expression
    (27) statement -> . VAR NAME AFFECT address

    RETURN          shift and go to state 16
    NAME            shift and go to state 118
    VAR             shift and go to state 17

    statement                      shift and go to state 119

state 114

    (17) declarg -> NAME COMMA declarg .

    RPAREN          reduce using rule 17 (declarg -> NAME COMMA declarg .)


state 115

    (10) funcdef -> LET NAME LPAREN declarg RPAREN block . END

    END             shift and go to state 120


state 116

    (11) funcdef -> LET NAME LPAREN RPAREN block END .

    IF              reduce using rule 11 (funcdef -> LET NAME LPAREN RPAREN block END .)
    WHILE           reduce using rule 11 (funcdef -> LET NAME LPAREN RPAREN block END .)
    UNTIL           reduce using rule 11 (funcdef -> LET NAME LPAREN RPAREN block END .)
    FOR             reduce using rule 11 (funcdef -> LET NAME LPAREN RPAREN block END .)
    LET             reduce using rule 11 (funcdef -> LET NAME LPAREN RPAREN block END .)
    RETURN          reduce using rule 11 (funcdef -> LET NAME LPAREN RPAREN block END .)
    NAME            reduce using rule 11 (funcdef -> LET NAME LPAREN RPAREN block END .)
    VAR             reduce using rule 11 (funcdef -> LET NAME LPAREN RPAREN block END .)
    PRINT           reduce using rule 11 (funcdef -> LET NAME LPAREN RPAREN block END .)
    LPAREN          reduce using rule 11 (funcdef -> LET NAME LPAREN RPAREN block END .)
    NUMBER          reduce using rule 11 (funcdef -> LET NAME LPAREN RPAREN block END .)
    $end            reduce using rule 11 (funcdef -> LET NAME LPAREN RPAREN block END .)
    END             reduce using rule 11 (funcdef -> LET NAME LPAREN RPAREN block END .)
    ELSE            reduce using rule 11 (funcdef -> LET NAME LPAREN RPAREN block END .)


state 117

    (29) condition -> IF LPAREN boolexpr RPAREN block ELSE block . END

    END             shift and go to state 121


state 118

    (13) statement -> NAME . LPAREN callarg RPAREN
    (14) statement -> NAME . LPAREN RPAREN
    (23) statement -> NAME . AFFECT expression
    (24) statement -> NAME . AFFECT address

    LPAREN          shift and go to state 122
    AFFECT          shift and go to state 39


state 119

    (32) loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement . RPAREN block END

    RPAREN          shift and go to state 123


state 120

    (10) funcdef -> LET NAME LPAREN declarg RPAREN block END .

    IF              reduce using rule 10 (funcdef -> LET NAME LPAREN declarg RPAREN block END .)
    WHILE           reduce using rule 10 (funcdef -> LET NAME LPAREN declarg RPAREN block END .)
    UNTIL           reduce using rule 10 (funcdef -> LET NAME LPAREN declarg RPAREN block END .)
    FOR             reduce using rule 10 (funcdef -> LET NAME LPAREN declarg RPAREN block END .)
    LET             reduce using rule 10 (funcdef -> LET NAME LPAREN declarg RPAREN block END .)
    RETURN          reduce using rule 10 (funcdef -> LET NAME LPAREN declarg RPAREN block END .)
    NAME            reduce using rule 10 (funcdef -> LET NAME LPAREN declarg RPAREN block END .)
    VAR             reduce using rule 10 (funcdef -> LET NAME LPAREN declarg RPAREN block END .)
    PRINT           reduce using rule 10 (funcdef -> LET NAME LPAREN declarg RPAREN block END .)
    LPAREN          reduce using rule 10 (funcdef -> LET NAME LPAREN declarg RPAREN block END .)
    NUMBER          reduce using rule 10 (funcdef -> LET NAME LPAREN declarg RPAREN block END .)
    $end            reduce using rule 10 (funcdef -> LET NAME LPAREN declarg RPAREN block END .)
    END             reduce using rule 10 (funcdef -> LET NAME LPAREN declarg RPAREN block END .)
    ELSE            reduce using rule 10 (funcdef -> LET NAME LPAREN declarg RPAREN block END .)


state 121

    (29) condition -> IF LPAREN boolexpr RPAREN block ELSE block END .

    IF              reduce using rule 29 (condition -> IF LPAREN boolexpr RPAREN block ELSE block END .)
    WHILE           reduce using rule 29 (condition -> IF LPAREN boolexpr RPAREN block ELSE block END .)
    UNTIL           reduce using rule 29 (condition -> IF LPAREN boolexpr RPAREN block ELSE block END .)
    FOR             reduce using rule 29 (condition -> IF LPAREN boolexpr RPAREN block ELSE block END .)
    LET             reduce using rule 29 (condition -> IF LPAREN boolexpr RPAREN block ELSE block END .)
    RETURN          reduce using rule 29 (condition -> IF LPAREN boolexpr RPAREN block ELSE block END .)
    NAME            reduce using rule 29 (condition -> IF LPAREN boolexpr RPAREN block ELSE block END .)
    VAR             reduce using rule 29 (condition -> IF LPAREN boolexpr RPAREN block ELSE block END .)
    PRINT           reduce using rule 29 (condition -> IF LPAREN boolexpr RPAREN block ELSE block END .)
    LPAREN          reduce using rule 29 (condition -> IF LPAREN boolexpr RPAREN block ELSE block END .)
    NUMBER          reduce using rule 29 (condition -> IF LPAREN boolexpr RPAREN block ELSE block END .)
    $end            reduce using rule 29 (condition -> IF LPAREN boolexpr RPAREN block ELSE block END .)
    END             reduce using rule 29 (condition -> IF LPAREN boolexpr RPAREN block ELSE block END .)
    ELSE            reduce using rule 29 (condition -> IF LPAREN boolexpr RPAREN block ELSE block END .)


state 122

    (13) statement -> NAME LPAREN . callarg RPAREN
    (14) statement -> NAME LPAREN . RPAREN
    (19) callarg -> . expression COMMA callarg
    (20) callarg -> . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    RPAREN          shift and go to state 125
    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    callarg                        shift and go to state 124
    expression                     shift and go to state 61

state 123

    (32) loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN . block END
    (2) block -> . instruction block
    (3) block -> . condition block
    (4) block -> . loop block
    (5) block -> . funcdef block
    (6) block -> . instruction
    (7) block -> . condition
    (8) block -> . loop
    (9) block -> . funcdef
    (21) instruction -> . statement SEMICOLON
    (22) instruction -> . expression SEMICOLON
    (28) condition -> . IF LPAREN boolexpr RPAREN block END
    (29) condition -> . IF LPAREN boolexpr RPAREN block ELSE block END
    (30) loop -> . WHILE LPAREN boolexpr RPAREN block END
    (31) loop -> . UNTIL LPAREN boolexpr RPAREN block END
    (32) loop -> . FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END
    (10) funcdef -> . LET NAME LPAREN declarg RPAREN block END
    (11) funcdef -> . LET NAME LPAREN RPAREN block END
    (12) statement -> . RETURN expression
    (13) statement -> . NAME LPAREN callarg RPAREN
    (14) statement -> . NAME LPAREN RPAREN
    (23) statement -> . NAME AFFECT expression
    (24) statement -> . NAME AFFECT address
    (25) statement -> . VAR NAME
    (26) statement -> . VAR NAME AFFECT expression
    (27) statement -> . VAR NAME AFFECT address
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (41) expression -> . PRINT LPAREN expression RPAREN
    (42) expression -> . expression PLUS expression
    (43) expression -> . NAME SHORTINCR
    (44) expression -> . NAME SHORTADD expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression AND expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . NUMBER
    (52) expression -> . NAME

    IF              shift and go to state 9
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 12
    FOR             shift and go to state 13
    LET             shift and go to state 15
    RETURN          shift and go to state 16
    NAME            shift and go to state 14
    VAR             shift and go to state 17
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    statement                      shift and go to state 7
    block                          shift and go to state 126
    instruction                    shift and go to state 3
    condition                      shift and go to state 4
    loop                           shift and go to state 5
    funcdef                        shift and go to state 6
    expression                     shift and go to state 8

state 124

    (13) statement -> NAME LPAREN callarg . RPAREN

    RPAREN          shift and go to state 127


state 125

    (14) statement -> NAME LPAREN RPAREN .

    RPAREN          reduce using rule 14 (statement -> NAME LPAREN RPAREN .)


state 126

    (32) loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block . END

    END             shift and go to state 128


state 127

    (13) statement -> NAME LPAREN callarg RPAREN .

    RPAREN          reduce using rule 13 (statement -> NAME LPAREN callarg RPAREN .)


state 128

    (32) loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END .

    IF              reduce using rule 32 (loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END .)
    WHILE           reduce using rule 32 (loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END .)
    UNTIL           reduce using rule 32 (loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END .)
    FOR             reduce using rule 32 (loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END .)
    LET             reduce using rule 32 (loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END .)
    RETURN          reduce using rule 32 (loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END .)
    NAME            reduce using rule 32 (loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END .)
    VAR             reduce using rule 32 (loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END .)
    PRINT           reduce using rule 32 (loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END .)
    LPAREN          reduce using rule 32 (loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END .)
    NUMBER          reduce using rule 32 (loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END .)
    $end            reduce using rule 32 (loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END .)
    END             reduce using rule 32 (loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END .)
    ELSE            reduce using rule 32 (loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 65 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 65 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 65 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 65 resolved as shift
WARNING: shift/reduce conflict for OR in state 65 resolved as shift
WARNING: shift/reduce conflict for AND in state 65 resolved as shift
WARNING: shift/reduce conflict for COR in state 93 resolved as shift
WARNING: reduce/reduce conflict in state 60 resolved using rule (statement -> NAME LPAREN RPAREN)
WARNING: rejected rule (expression -> NAME LPAREN RPAREN) in state 60
WARNING: reduce/reduce conflict in state 83 resolved using rule (statement -> NAME LPAREN callarg RPAREN)
WARNING: rejected rule (expression -> NAME LPAREN callarg RPAREN) in state 83
