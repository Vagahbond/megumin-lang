Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> block
Rule 2     block -> instruction block
Rule 3     block -> condition block
Rule 4     block -> loop block
Rule 5     block -> funcdef block
Rule 6     block -> instruction
Rule 7     block -> condition
Rule 8     block -> loop
Rule 9     block -> funcdef
Rule 10    funcdef -> LET NAME LPAREN declarg RPAREN block END
Rule 11    funcdef -> LET NAME LPAREN RPAREN block END
Rule 12    statement -> RETURN expression
Rule 13    statement -> NAME LPAREN callarg RPAREN
Rule 14    statement -> NAME LPAREN RPAREN
Rule 15    expression -> NAME LPAREN callarg RPAREN
Rule 16    expression -> NAME LPAREN RPAREN
Rule 17    declarg -> NAME COMMA declarg
Rule 18    declarg -> NAME
Rule 19    callarg -> expression COMMA callarg
Rule 20    callarg -> expression
Rule 21    instruction -> statement SEMICOLON
Rule 22    instruction -> expression SEMICOLON
Rule 23    statement -> NAME AFFECT expression
Rule 24    statement -> VAR NAME
Rule 25    statement -> VAR NAME AFFECT expression
Rule 26    condition -> IF LPAREN boolexpr RPAREN block END
Rule 27    condition -> IF LPAREN boolexpr RPAREN block ELSE block END
Rule 28    loop -> WHILE LPAREN boolexpr RPAREN block END
Rule 29    loop -> UNTIL LPAREN boolexpr RPAREN block END
Rule 30    loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END
Rule 31    boolexpr -> boolexpr COR boolexpr
Rule 32    boolexpr -> expression CAND expression
Rule 33    boolexpr -> expression GT expression
Rule 34    boolexpr -> expression LT expression
Rule 35    boolexpr -> expression LOE expression
Rule 36    boolexpr -> expression GOE expression
Rule 37    boolexpr -> expression EQUALS expression
Rule 38    boolexpr -> expression DIFFERENT expression
Rule 39    expression -> PRINT LPAREN expression RPAREN
Rule 40    expression -> expression PLUS expression
Rule 41    expression -> expression TIMES expression
Rule 42    expression -> expression MINUS expression
Rule 43    expression -> expression DIVIDE expression
Rule 44    expression -> expression OR expression
Rule 45    expression -> expression AND expression
Rule 46    expression -> LPAREN expression RPAREN
Rule 47    expression -> NUMBER
Rule 48    expression -> NAME

Terminals, with rules where they appear

AFFECT               : 23 25
AND                  : 45
CAND                 : 32
COMMA                : 17 19
COR                  : 31
DIFFERENT            : 38
DIVIDE               : 43
ELSE                 : 27
END                  : 10 11 26 27 28 29 30
EQUALS               : 37
FOR                  : 30
GOE                  : 36
GT                   : 33
IF                   : 26 27
LET                  : 10 11
LOE                  : 35
LPAREN               : 10 11 13 14 15 16 26 27 28 29 30 39 46
LT                   : 34
MINUS                : 42
NAME                 : 10 11 13 14 15 16 17 18 23 24 25 30 48
NUMBER               : 47
OR                   : 44
PLUS                 : 40
PRINT                : 39
RETURN               : 12
RPAREN               : 10 11 13 14 15 16 26 27 28 29 30 39 46
SEMICOLON            : 21 22 30 30
TIMES                : 41
UNTIL                : 29
VAR                  : 24 25
WHILE                : 28
error                : 

Nonterminals, with rules where they appear

block                : 1 2 3 4 5 10 11 26 27 27 28 29 30
boolexpr             : 26 27 28 29 30 31 31
callarg              : 13 15 19
condition            : 3 7
declarg              : 10 17
expression           : 12 19 20 22 23 25 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 40 40 41 41 42 42 43 43 44 44 45 45 46
funcdef              : 5 9
instruction          : 2 6
loop                 : 4 8
start                : 0
statement            : 21 30

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . block
    (2) block -> . instruction block
    (3) block -> . condition block
    (4) block -> . loop block
    (5) block -> . funcdef block
    (6) block -> . instruction
    (7) block -> . condition
    (8) block -> . loop
    (9) block -> . funcdef
    (21) instruction -> . statement SEMICOLON
    (22) instruction -> . expression SEMICOLON
    (26) condition -> . IF LPAREN boolexpr RPAREN block END
    (27) condition -> . IF LPAREN boolexpr RPAREN block ELSE block END
    (28) loop -> . WHILE LPAREN boolexpr RPAREN block END
    (29) loop -> . UNTIL LPAREN boolexpr RPAREN block END
    (30) loop -> . FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END
    (10) funcdef -> . LET NAME LPAREN declarg RPAREN block END
    (11) funcdef -> . LET NAME LPAREN RPAREN block END
    (12) statement -> . RETURN expression
    (13) statement -> . NAME LPAREN callarg RPAREN
    (14) statement -> . NAME LPAREN RPAREN
    (23) statement -> . NAME AFFECT expression
    (24) statement -> . VAR NAME
    (25) statement -> . VAR NAME AFFECT expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    IF              shift and go to state 9
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 12
    FOR             shift and go to state 13
    LET             shift and go to state 15
    RETURN          shift and go to state 16
    NAME            shift and go to state 14
    VAR             shift and go to state 17
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    start                          shift and go to state 1
    block                          shift and go to state 2
    instruction                    shift and go to state 3
    condition                      shift and go to state 4
    loop                           shift and go to state 5
    funcdef                        shift and go to state 6
    statement                      shift and go to state 7
    expression                     shift and go to state 8

state 1

    (0) S' -> start .



state 2

    (1) start -> block .

    $end            reduce using rule 1 (start -> block .)


state 3

    (2) block -> instruction . block
    (6) block -> instruction .
    (2) block -> . instruction block
    (3) block -> . condition block
    (4) block -> . loop block
    (5) block -> . funcdef block
    (6) block -> . instruction
    (7) block -> . condition
    (8) block -> . loop
    (9) block -> . funcdef
    (21) instruction -> . statement SEMICOLON
    (22) instruction -> . expression SEMICOLON
    (26) condition -> . IF LPAREN boolexpr RPAREN block END
    (27) condition -> . IF LPAREN boolexpr RPAREN block ELSE block END
    (28) loop -> . WHILE LPAREN boolexpr RPAREN block END
    (29) loop -> . UNTIL LPAREN boolexpr RPAREN block END
    (30) loop -> . FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END
    (10) funcdef -> . LET NAME LPAREN declarg RPAREN block END
    (11) funcdef -> . LET NAME LPAREN RPAREN block END
    (12) statement -> . RETURN expression
    (13) statement -> . NAME LPAREN callarg RPAREN
    (14) statement -> . NAME LPAREN RPAREN
    (23) statement -> . NAME AFFECT expression
    (24) statement -> . VAR NAME
    (25) statement -> . VAR NAME AFFECT expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    $end            reduce using rule 6 (block -> instruction .)
    END             reduce using rule 6 (block -> instruction .)
    ELSE            reduce using rule 6 (block -> instruction .)
    IF              shift and go to state 9
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 12
    FOR             shift and go to state 13
    LET             shift and go to state 15
    RETURN          shift and go to state 16
    NAME            shift and go to state 14
    VAR             shift and go to state 17
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    instruction                    shift and go to state 3
    block                          shift and go to state 20
    condition                      shift and go to state 4
    loop                           shift and go to state 5
    funcdef                        shift and go to state 6
    statement                      shift and go to state 7
    expression                     shift and go to state 8

state 4

    (3) block -> condition . block
    (7) block -> condition .
    (2) block -> . instruction block
    (3) block -> . condition block
    (4) block -> . loop block
    (5) block -> . funcdef block
    (6) block -> . instruction
    (7) block -> . condition
    (8) block -> . loop
    (9) block -> . funcdef
    (21) instruction -> . statement SEMICOLON
    (22) instruction -> . expression SEMICOLON
    (26) condition -> . IF LPAREN boolexpr RPAREN block END
    (27) condition -> . IF LPAREN boolexpr RPAREN block ELSE block END
    (28) loop -> . WHILE LPAREN boolexpr RPAREN block END
    (29) loop -> . UNTIL LPAREN boolexpr RPAREN block END
    (30) loop -> . FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END
    (10) funcdef -> . LET NAME LPAREN declarg RPAREN block END
    (11) funcdef -> . LET NAME LPAREN RPAREN block END
    (12) statement -> . RETURN expression
    (13) statement -> . NAME LPAREN callarg RPAREN
    (14) statement -> . NAME LPAREN RPAREN
    (23) statement -> . NAME AFFECT expression
    (24) statement -> . VAR NAME
    (25) statement -> . VAR NAME AFFECT expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    $end            reduce using rule 7 (block -> condition .)
    END             reduce using rule 7 (block -> condition .)
    ELSE            reduce using rule 7 (block -> condition .)
    IF              shift and go to state 9
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 12
    FOR             shift and go to state 13
    LET             shift and go to state 15
    RETURN          shift and go to state 16
    NAME            shift and go to state 14
    VAR             shift and go to state 17
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    condition                      shift and go to state 4
    block                          shift and go to state 21
    instruction                    shift and go to state 3
    loop                           shift and go to state 5
    funcdef                        shift and go to state 6
    statement                      shift and go to state 7
    expression                     shift and go to state 8

state 5

    (4) block -> loop . block
    (8) block -> loop .
    (2) block -> . instruction block
    (3) block -> . condition block
    (4) block -> . loop block
    (5) block -> . funcdef block
    (6) block -> . instruction
    (7) block -> . condition
    (8) block -> . loop
    (9) block -> . funcdef
    (21) instruction -> . statement SEMICOLON
    (22) instruction -> . expression SEMICOLON
    (26) condition -> . IF LPAREN boolexpr RPAREN block END
    (27) condition -> . IF LPAREN boolexpr RPAREN block ELSE block END
    (28) loop -> . WHILE LPAREN boolexpr RPAREN block END
    (29) loop -> . UNTIL LPAREN boolexpr RPAREN block END
    (30) loop -> . FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END
    (10) funcdef -> . LET NAME LPAREN declarg RPAREN block END
    (11) funcdef -> . LET NAME LPAREN RPAREN block END
    (12) statement -> . RETURN expression
    (13) statement -> . NAME LPAREN callarg RPAREN
    (14) statement -> . NAME LPAREN RPAREN
    (23) statement -> . NAME AFFECT expression
    (24) statement -> . VAR NAME
    (25) statement -> . VAR NAME AFFECT expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    $end            reduce using rule 8 (block -> loop .)
    END             reduce using rule 8 (block -> loop .)
    ELSE            reduce using rule 8 (block -> loop .)
    IF              shift and go to state 9
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 12
    FOR             shift and go to state 13
    LET             shift and go to state 15
    RETURN          shift and go to state 16
    NAME            shift and go to state 14
    VAR             shift and go to state 17
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    loop                           shift and go to state 5
    block                          shift and go to state 22
    instruction                    shift and go to state 3
    condition                      shift and go to state 4
    funcdef                        shift and go to state 6
    statement                      shift and go to state 7
    expression                     shift and go to state 8

state 6

    (5) block -> funcdef . block
    (9) block -> funcdef .
    (2) block -> . instruction block
    (3) block -> . condition block
    (4) block -> . loop block
    (5) block -> . funcdef block
    (6) block -> . instruction
    (7) block -> . condition
    (8) block -> . loop
    (9) block -> . funcdef
    (21) instruction -> . statement SEMICOLON
    (22) instruction -> . expression SEMICOLON
    (26) condition -> . IF LPAREN boolexpr RPAREN block END
    (27) condition -> . IF LPAREN boolexpr RPAREN block ELSE block END
    (28) loop -> . WHILE LPAREN boolexpr RPAREN block END
    (29) loop -> . UNTIL LPAREN boolexpr RPAREN block END
    (30) loop -> . FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END
    (10) funcdef -> . LET NAME LPAREN declarg RPAREN block END
    (11) funcdef -> . LET NAME LPAREN RPAREN block END
    (12) statement -> . RETURN expression
    (13) statement -> . NAME LPAREN callarg RPAREN
    (14) statement -> . NAME LPAREN RPAREN
    (23) statement -> . NAME AFFECT expression
    (24) statement -> . VAR NAME
    (25) statement -> . VAR NAME AFFECT expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    $end            reduce using rule 9 (block -> funcdef .)
    END             reduce using rule 9 (block -> funcdef .)
    ELSE            reduce using rule 9 (block -> funcdef .)
    IF              shift and go to state 9
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 12
    FOR             shift and go to state 13
    LET             shift and go to state 15
    RETURN          shift and go to state 16
    NAME            shift and go to state 14
    VAR             shift and go to state 17
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    funcdef                        shift and go to state 6
    block                          shift and go to state 23
    instruction                    shift and go to state 3
    condition                      shift and go to state 4
    loop                           shift and go to state 5
    statement                      shift and go to state 7
    expression                     shift and go to state 8

state 7

    (21) instruction -> statement . SEMICOLON

    SEMICOLON       shift and go to state 24


state 8

    (22) instruction -> expression . SEMICOLON
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . MINUS expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . OR expression
    (45) expression -> expression . AND expression

    SEMICOLON       shift and go to state 25
    PLUS            shift and go to state 26
    TIMES           shift and go to state 27
    MINUS           shift and go to state 28
    DIVIDE          shift and go to state 29
    OR              shift and go to state 30
    AND             shift and go to state 31


state 9

    (26) condition -> IF . LPAREN boolexpr RPAREN block END
    (27) condition -> IF . LPAREN boolexpr RPAREN block ELSE block END

    LPAREN          shift and go to state 32


state 10

    (46) expression -> LPAREN . expression RPAREN
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 33

state 11

    (28) loop -> WHILE . LPAREN boolexpr RPAREN block END

    LPAREN          shift and go to state 35


state 12

    (29) loop -> UNTIL . LPAREN boolexpr RPAREN block END

    LPAREN          shift and go to state 36


state 13

    (30) loop -> FOR . LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END

    LPAREN          shift and go to state 37


state 14

    (13) statement -> NAME . LPAREN callarg RPAREN
    (14) statement -> NAME . LPAREN RPAREN
    (23) statement -> NAME . AFFECT expression
    (15) expression -> NAME . LPAREN callarg RPAREN
    (16) expression -> NAME . LPAREN RPAREN
    (48) expression -> NAME .

    LPAREN          shift and go to state 38
    AFFECT          shift and go to state 39
    SEMICOLON       reduce using rule 48 (expression -> NAME .)
    PLUS            reduce using rule 48 (expression -> NAME .)
    TIMES           reduce using rule 48 (expression -> NAME .)
    MINUS           reduce using rule 48 (expression -> NAME .)
    DIVIDE          reduce using rule 48 (expression -> NAME .)
    OR              reduce using rule 48 (expression -> NAME .)
    AND             reduce using rule 48 (expression -> NAME .)


state 15

    (10) funcdef -> LET . NAME LPAREN declarg RPAREN block END
    (11) funcdef -> LET . NAME LPAREN RPAREN block END

    NAME            shift and go to state 40


state 16

    (12) statement -> RETURN . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 41

state 17

    (24) statement -> VAR . NAME
    (25) statement -> VAR . NAME AFFECT expression

    NAME            shift and go to state 42


state 18

    (39) expression -> PRINT . LPAREN expression RPAREN

    LPAREN          shift and go to state 43


state 19

    (47) expression -> NUMBER .

    SEMICOLON       reduce using rule 47 (expression -> NUMBER .)
    PLUS            reduce using rule 47 (expression -> NUMBER .)
    TIMES           reduce using rule 47 (expression -> NUMBER .)
    MINUS           reduce using rule 47 (expression -> NUMBER .)
    DIVIDE          reduce using rule 47 (expression -> NUMBER .)
    OR              reduce using rule 47 (expression -> NUMBER .)
    AND             reduce using rule 47 (expression -> NUMBER .)
    RPAREN          reduce using rule 47 (expression -> NUMBER .)
    CAND            reduce using rule 47 (expression -> NUMBER .)
    GT              reduce using rule 47 (expression -> NUMBER .)
    LT              reduce using rule 47 (expression -> NUMBER .)
    LOE             reduce using rule 47 (expression -> NUMBER .)
    GOE             reduce using rule 47 (expression -> NUMBER .)
    EQUALS          reduce using rule 47 (expression -> NUMBER .)
    DIFFERENT       reduce using rule 47 (expression -> NUMBER .)
    COMMA           reduce using rule 47 (expression -> NUMBER .)
    COR             reduce using rule 47 (expression -> NUMBER .)


state 20

    (2) block -> instruction block .

    $end            reduce using rule 2 (block -> instruction block .)
    END             reduce using rule 2 (block -> instruction block .)
    ELSE            reduce using rule 2 (block -> instruction block .)


state 21

    (3) block -> condition block .

    $end            reduce using rule 3 (block -> condition block .)
    END             reduce using rule 3 (block -> condition block .)
    ELSE            reduce using rule 3 (block -> condition block .)


state 22

    (4) block -> loop block .

    $end            reduce using rule 4 (block -> loop block .)
    END             reduce using rule 4 (block -> loop block .)
    ELSE            reduce using rule 4 (block -> loop block .)


state 23

    (5) block -> funcdef block .

    $end            reduce using rule 5 (block -> funcdef block .)
    END             reduce using rule 5 (block -> funcdef block .)
    ELSE            reduce using rule 5 (block -> funcdef block .)


state 24

    (21) instruction -> statement SEMICOLON .

    IF              reduce using rule 21 (instruction -> statement SEMICOLON .)
    WHILE           reduce using rule 21 (instruction -> statement SEMICOLON .)
    UNTIL           reduce using rule 21 (instruction -> statement SEMICOLON .)
    FOR             reduce using rule 21 (instruction -> statement SEMICOLON .)
    LET             reduce using rule 21 (instruction -> statement SEMICOLON .)
    RETURN          reduce using rule 21 (instruction -> statement SEMICOLON .)
    NAME            reduce using rule 21 (instruction -> statement SEMICOLON .)
    VAR             reduce using rule 21 (instruction -> statement SEMICOLON .)
    PRINT           reduce using rule 21 (instruction -> statement SEMICOLON .)
    LPAREN          reduce using rule 21 (instruction -> statement SEMICOLON .)
    NUMBER          reduce using rule 21 (instruction -> statement SEMICOLON .)
    $end            reduce using rule 21 (instruction -> statement SEMICOLON .)
    END             reduce using rule 21 (instruction -> statement SEMICOLON .)
    ELSE            reduce using rule 21 (instruction -> statement SEMICOLON .)


state 25

    (22) instruction -> expression SEMICOLON .

    IF              reduce using rule 22 (instruction -> expression SEMICOLON .)
    WHILE           reduce using rule 22 (instruction -> expression SEMICOLON .)
    UNTIL           reduce using rule 22 (instruction -> expression SEMICOLON .)
    FOR             reduce using rule 22 (instruction -> expression SEMICOLON .)
    LET             reduce using rule 22 (instruction -> expression SEMICOLON .)
    RETURN          reduce using rule 22 (instruction -> expression SEMICOLON .)
    NAME            reduce using rule 22 (instruction -> expression SEMICOLON .)
    VAR             reduce using rule 22 (instruction -> expression SEMICOLON .)
    PRINT           reduce using rule 22 (instruction -> expression SEMICOLON .)
    LPAREN          reduce using rule 22 (instruction -> expression SEMICOLON .)
    NUMBER          reduce using rule 22 (instruction -> expression SEMICOLON .)
    $end            reduce using rule 22 (instruction -> expression SEMICOLON .)
    END             reduce using rule 22 (instruction -> expression SEMICOLON .)
    ELSE            reduce using rule 22 (instruction -> expression SEMICOLON .)


state 26

    (40) expression -> expression PLUS . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 44

state 27

    (41) expression -> expression TIMES . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 45

state 28

    (42) expression -> expression MINUS . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 46

state 29

    (43) expression -> expression DIVIDE . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 47

state 30

    (44) expression -> expression OR . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 48

state 31

    (45) expression -> expression AND . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 49

state 32

    (26) condition -> IF LPAREN . boolexpr RPAREN block END
    (27) condition -> IF LPAREN . boolexpr RPAREN block ELSE block END
    (31) boolexpr -> . boolexpr COR boolexpr
    (32) boolexpr -> . expression CAND expression
    (33) boolexpr -> . expression GT expression
    (34) boolexpr -> . expression LT expression
    (35) boolexpr -> . expression LOE expression
    (36) boolexpr -> . expression GOE expression
    (37) boolexpr -> . expression EQUALS expression
    (38) boolexpr -> . expression DIFFERENT expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    boolexpr                       shift and go to state 50
    expression                     shift and go to state 51

state 33

    (46) expression -> LPAREN expression . RPAREN
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . MINUS expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . OR expression
    (45) expression -> expression . AND expression

    RPAREN          shift and go to state 52
    PLUS            shift and go to state 26
    TIMES           shift and go to state 27
    MINUS           shift and go to state 28
    DIVIDE          shift and go to state 29
    OR              shift and go to state 30
    AND             shift and go to state 31


state 34

    (15) expression -> NAME . LPAREN callarg RPAREN
    (16) expression -> NAME . LPAREN RPAREN
    (48) expression -> NAME .

    LPAREN          shift and go to state 53
    RPAREN          reduce using rule 48 (expression -> NAME .)
    PLUS            reduce using rule 48 (expression -> NAME .)
    TIMES           reduce using rule 48 (expression -> NAME .)
    MINUS           reduce using rule 48 (expression -> NAME .)
    DIVIDE          reduce using rule 48 (expression -> NAME .)
    OR              reduce using rule 48 (expression -> NAME .)
    AND             reduce using rule 48 (expression -> NAME .)
    SEMICOLON       reduce using rule 48 (expression -> NAME .)
    CAND            reduce using rule 48 (expression -> NAME .)
    GT              reduce using rule 48 (expression -> NAME .)
    LT              reduce using rule 48 (expression -> NAME .)
    LOE             reduce using rule 48 (expression -> NAME .)
    GOE             reduce using rule 48 (expression -> NAME .)
    EQUALS          reduce using rule 48 (expression -> NAME .)
    DIFFERENT       reduce using rule 48 (expression -> NAME .)
    COMMA           reduce using rule 48 (expression -> NAME .)
    COR             reduce using rule 48 (expression -> NAME .)


state 35

    (28) loop -> WHILE LPAREN . boolexpr RPAREN block END
    (31) boolexpr -> . boolexpr COR boolexpr
    (32) boolexpr -> . expression CAND expression
    (33) boolexpr -> . expression GT expression
    (34) boolexpr -> . expression LT expression
    (35) boolexpr -> . expression LOE expression
    (36) boolexpr -> . expression GOE expression
    (37) boolexpr -> . expression EQUALS expression
    (38) boolexpr -> . expression DIFFERENT expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    boolexpr                       shift and go to state 54
    expression                     shift and go to state 51

state 36

    (29) loop -> UNTIL LPAREN . boolexpr RPAREN block END
    (31) boolexpr -> . boolexpr COR boolexpr
    (32) boolexpr -> . expression CAND expression
    (33) boolexpr -> . expression GT expression
    (34) boolexpr -> . expression LT expression
    (35) boolexpr -> . expression LOE expression
    (36) boolexpr -> . expression GOE expression
    (37) boolexpr -> . expression EQUALS expression
    (38) boolexpr -> . expression DIFFERENT expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    boolexpr                       shift and go to state 55
    expression                     shift and go to state 51

state 37

    (30) loop -> FOR LPAREN . NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END

    NAME            shift and go to state 56


state 38

    (13) statement -> NAME LPAREN . callarg RPAREN
    (14) statement -> NAME LPAREN . RPAREN
    (15) expression -> NAME LPAREN . callarg RPAREN
    (16) expression -> NAME LPAREN . RPAREN
    (19) callarg -> . expression COMMA callarg
    (20) callarg -> . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    RPAREN          shift and go to state 58
    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    callarg                        shift and go to state 57
    expression                     shift and go to state 59

state 39

    (23) statement -> NAME AFFECT . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 60

state 40

    (10) funcdef -> LET NAME . LPAREN declarg RPAREN block END
    (11) funcdef -> LET NAME . LPAREN RPAREN block END

    LPAREN          shift and go to state 61


state 41

    (12) statement -> RETURN expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . MINUS expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . OR expression
    (45) expression -> expression . AND expression

    SEMICOLON       reduce using rule 12 (statement -> RETURN expression .)
    RPAREN          reduce using rule 12 (statement -> RETURN expression .)
    PLUS            shift and go to state 26
    TIMES           shift and go to state 27
    MINUS           shift and go to state 28
    DIVIDE          shift and go to state 29
    OR              shift and go to state 30
    AND             shift and go to state 31


state 42

    (24) statement -> VAR NAME .
    (25) statement -> VAR NAME . AFFECT expression

    SEMICOLON       reduce using rule 24 (statement -> VAR NAME .)
    RPAREN          reduce using rule 24 (statement -> VAR NAME .)
    AFFECT          shift and go to state 62


state 43

    (39) expression -> PRINT LPAREN . expression RPAREN
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 63

state 44

    (40) expression -> expression PLUS expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . MINUS expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . OR expression
    (45) expression -> expression . AND expression

    SEMICOLON       reduce using rule 40 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 40 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 40 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 40 (expression -> expression PLUS expression .)
    CAND            reduce using rule 40 (expression -> expression PLUS expression .)
    GT              reduce using rule 40 (expression -> expression PLUS expression .)
    LT              reduce using rule 40 (expression -> expression PLUS expression .)
    LOE             reduce using rule 40 (expression -> expression PLUS expression .)
    GOE             reduce using rule 40 (expression -> expression PLUS expression .)
    EQUALS          reduce using rule 40 (expression -> expression PLUS expression .)
    DIFFERENT       reduce using rule 40 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 40 (expression -> expression PLUS expression .)
    COR             reduce using rule 40 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 29
    OR              shift and go to state 30
    AND             shift and go to state 31

  ! TIMES           [ reduce using rule 40 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 40 (expression -> expression PLUS expression .) ]
  ! OR              [ reduce using rule 40 (expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 40 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 26 ]
  ! MINUS           [ shift and go to state 28 ]


state 45

    (41) expression -> expression TIMES expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . MINUS expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . OR expression
    (45) expression -> expression . AND expression

    SEMICOLON       reduce using rule 41 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 41 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 41 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 41 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 41 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 41 (expression -> expression TIMES expression .)
    CAND            reduce using rule 41 (expression -> expression TIMES expression .)
    GT              reduce using rule 41 (expression -> expression TIMES expression .)
    LT              reduce using rule 41 (expression -> expression TIMES expression .)
    LOE             reduce using rule 41 (expression -> expression TIMES expression .)
    GOE             reduce using rule 41 (expression -> expression TIMES expression .)
    EQUALS          reduce using rule 41 (expression -> expression TIMES expression .)
    DIFFERENT       reduce using rule 41 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 41 (expression -> expression TIMES expression .)
    COR             reduce using rule 41 (expression -> expression TIMES expression .)
    OR              shift and go to state 30
    AND             shift and go to state 31

  ! OR              [ reduce using rule 41 (expression -> expression TIMES expression .) ]
  ! AND             [ reduce using rule 41 (expression -> expression TIMES expression .) ]
  ! PLUS            [ shift and go to state 26 ]
  ! TIMES           [ shift and go to state 27 ]
  ! MINUS           [ shift and go to state 28 ]
  ! DIVIDE          [ shift and go to state 29 ]


state 46

    (42) expression -> expression MINUS expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . MINUS expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . OR expression
    (45) expression -> expression . AND expression

    SEMICOLON       reduce using rule 42 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 42 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 42 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 42 (expression -> expression MINUS expression .)
    CAND            reduce using rule 42 (expression -> expression MINUS expression .)
    GT              reduce using rule 42 (expression -> expression MINUS expression .)
    LT              reduce using rule 42 (expression -> expression MINUS expression .)
    LOE             reduce using rule 42 (expression -> expression MINUS expression .)
    GOE             reduce using rule 42 (expression -> expression MINUS expression .)
    EQUALS          reduce using rule 42 (expression -> expression MINUS expression .)
    DIFFERENT       reduce using rule 42 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 42 (expression -> expression MINUS expression .)
    COR             reduce using rule 42 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 29
    OR              shift and go to state 30
    AND             shift and go to state 31

  ! TIMES           [ reduce using rule 42 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 42 (expression -> expression MINUS expression .) ]
  ! OR              [ reduce using rule 42 (expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 42 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 26 ]
  ! MINUS           [ shift and go to state 28 ]


state 47

    (43) expression -> expression DIVIDE expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . MINUS expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . OR expression
    (45) expression -> expression . AND expression

    SEMICOLON       reduce using rule 43 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 43 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 43 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 43 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 43 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 43 (expression -> expression DIVIDE expression .)
    CAND            reduce using rule 43 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 43 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 43 (expression -> expression DIVIDE expression .)
    LOE             reduce using rule 43 (expression -> expression DIVIDE expression .)
    GOE             reduce using rule 43 (expression -> expression DIVIDE expression .)
    EQUALS          reduce using rule 43 (expression -> expression DIVIDE expression .)
    DIFFERENT       reduce using rule 43 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 43 (expression -> expression DIVIDE expression .)
    COR             reduce using rule 43 (expression -> expression DIVIDE expression .)
    OR              shift and go to state 30
    AND             shift and go to state 31

  ! OR              [ reduce using rule 43 (expression -> expression DIVIDE expression .) ]
  ! AND             [ reduce using rule 43 (expression -> expression DIVIDE expression .) ]
  ! PLUS            [ shift and go to state 26 ]
  ! TIMES           [ shift and go to state 27 ]
  ! MINUS           [ shift and go to state 28 ]
  ! DIVIDE          [ shift and go to state 29 ]


state 48

    (44) expression -> expression OR expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . MINUS expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . OR expression
    (45) expression -> expression . AND expression

    SEMICOLON       reduce using rule 44 (expression -> expression OR expression .)
    PLUS            reduce using rule 44 (expression -> expression OR expression .)
    TIMES           reduce using rule 44 (expression -> expression OR expression .)
    MINUS           reduce using rule 44 (expression -> expression OR expression .)
    DIVIDE          reduce using rule 44 (expression -> expression OR expression .)
    RPAREN          reduce using rule 44 (expression -> expression OR expression .)
    CAND            reduce using rule 44 (expression -> expression OR expression .)
    GT              reduce using rule 44 (expression -> expression OR expression .)
    LT              reduce using rule 44 (expression -> expression OR expression .)
    LOE             reduce using rule 44 (expression -> expression OR expression .)
    GOE             reduce using rule 44 (expression -> expression OR expression .)
    EQUALS          reduce using rule 44 (expression -> expression OR expression .)
    DIFFERENT       reduce using rule 44 (expression -> expression OR expression .)
    COMMA           reduce using rule 44 (expression -> expression OR expression .)
    COR             reduce using rule 44 (expression -> expression OR expression .)
    OR              shift and go to state 30
    AND             shift and go to state 31

  ! OR              [ reduce using rule 44 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 44 (expression -> expression OR expression .) ]
  ! PLUS            [ shift and go to state 26 ]
  ! TIMES           [ shift and go to state 27 ]
  ! MINUS           [ shift and go to state 28 ]
  ! DIVIDE          [ shift and go to state 29 ]


state 49

    (45) expression -> expression AND expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . MINUS expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . OR expression
    (45) expression -> expression . AND expression

    SEMICOLON       reduce using rule 45 (expression -> expression AND expression .)
    PLUS            reduce using rule 45 (expression -> expression AND expression .)
    TIMES           reduce using rule 45 (expression -> expression AND expression .)
    MINUS           reduce using rule 45 (expression -> expression AND expression .)
    DIVIDE          reduce using rule 45 (expression -> expression AND expression .)
    RPAREN          reduce using rule 45 (expression -> expression AND expression .)
    CAND            reduce using rule 45 (expression -> expression AND expression .)
    GT              reduce using rule 45 (expression -> expression AND expression .)
    LT              reduce using rule 45 (expression -> expression AND expression .)
    LOE             reduce using rule 45 (expression -> expression AND expression .)
    GOE             reduce using rule 45 (expression -> expression AND expression .)
    EQUALS          reduce using rule 45 (expression -> expression AND expression .)
    DIFFERENT       reduce using rule 45 (expression -> expression AND expression .)
    COMMA           reduce using rule 45 (expression -> expression AND expression .)
    COR             reduce using rule 45 (expression -> expression AND expression .)
    OR              shift and go to state 30
    AND             shift and go to state 31

  ! OR              [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! PLUS            [ shift and go to state 26 ]
  ! TIMES           [ shift and go to state 27 ]
  ! MINUS           [ shift and go to state 28 ]
  ! DIVIDE          [ shift and go to state 29 ]


state 50

    (26) condition -> IF LPAREN boolexpr . RPAREN block END
    (27) condition -> IF LPAREN boolexpr . RPAREN block ELSE block END
    (31) boolexpr -> boolexpr . COR boolexpr

    RPAREN          shift and go to state 64
    COR             shift and go to state 65


state 51

    (32) boolexpr -> expression . CAND expression
    (33) boolexpr -> expression . GT expression
    (34) boolexpr -> expression . LT expression
    (35) boolexpr -> expression . LOE expression
    (36) boolexpr -> expression . GOE expression
    (37) boolexpr -> expression . EQUALS expression
    (38) boolexpr -> expression . DIFFERENT expression
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . MINUS expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . OR expression
    (45) expression -> expression . AND expression

    CAND            shift and go to state 66
    GT              shift and go to state 67
    LT              shift and go to state 68
    LOE             shift and go to state 69
    GOE             shift and go to state 70
    EQUALS          shift and go to state 71
    DIFFERENT       shift and go to state 72
    PLUS            shift and go to state 26
    TIMES           shift and go to state 27
    MINUS           shift and go to state 28
    DIVIDE          shift and go to state 29
    OR              shift and go to state 30
    AND             shift and go to state 31


state 52

    (46) expression -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    CAND            reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    LOE             reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    GOE             reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    DIFFERENT       reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    COR             reduce using rule 46 (expression -> LPAREN expression RPAREN .)


state 53

    (15) expression -> NAME LPAREN . callarg RPAREN
    (16) expression -> NAME LPAREN . RPAREN
    (19) callarg -> . expression COMMA callarg
    (20) callarg -> . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    RPAREN          shift and go to state 74
    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    callarg                        shift and go to state 73
    expression                     shift and go to state 59

state 54

    (28) loop -> WHILE LPAREN boolexpr . RPAREN block END
    (31) boolexpr -> boolexpr . COR boolexpr

    RPAREN          shift and go to state 75
    COR             shift and go to state 65


state 55

    (29) loop -> UNTIL LPAREN boolexpr . RPAREN block END
    (31) boolexpr -> boolexpr . COR boolexpr

    RPAREN          shift and go to state 76
    COR             shift and go to state 65


state 56

    (30) loop -> FOR LPAREN NAME . SEMICOLON boolexpr SEMICOLON statement RPAREN block END

    SEMICOLON       shift and go to state 77


state 57

    (13) statement -> NAME LPAREN callarg . RPAREN
    (15) expression -> NAME LPAREN callarg . RPAREN

    RPAREN          shift and go to state 78


state 58

    (14) statement -> NAME LPAREN RPAREN .
    (16) expression -> NAME LPAREN RPAREN .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 14 (statement -> NAME LPAREN RPAREN .)
    SEMICOLON       reduce using rule 14 (statement -> NAME LPAREN RPAREN .)
    PLUS            reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    TIMES           reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    MINUS           reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    DIVIDE          reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    OR              reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    AND             reduce using rule 16 (expression -> NAME LPAREN RPAREN .)

  ! SEMICOLON       [ reduce using rule 16 (expression -> NAME LPAREN RPAREN .) ]


state 59

    (19) callarg -> expression . COMMA callarg
    (20) callarg -> expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . MINUS expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . OR expression
    (45) expression -> expression . AND expression

    COMMA           shift and go to state 79
    RPAREN          reduce using rule 20 (callarg -> expression .)
    PLUS            shift and go to state 26
    TIMES           shift and go to state 27
    MINUS           shift and go to state 28
    DIVIDE          shift and go to state 29
    OR              shift and go to state 30
    AND             shift and go to state 31


state 60

    (23) statement -> NAME AFFECT expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . MINUS expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . OR expression
    (45) expression -> expression . AND expression

    SEMICOLON       reduce using rule 23 (statement -> NAME AFFECT expression .)
    RPAREN          reduce using rule 23 (statement -> NAME AFFECT expression .)
    PLUS            shift and go to state 26
    TIMES           shift and go to state 27
    MINUS           shift and go to state 28
    DIVIDE          shift and go to state 29
    OR              shift and go to state 30
    AND             shift and go to state 31


state 61

    (10) funcdef -> LET NAME LPAREN . declarg RPAREN block END
    (11) funcdef -> LET NAME LPAREN . RPAREN block END
    (17) declarg -> . NAME COMMA declarg
    (18) declarg -> . NAME

    RPAREN          shift and go to state 82
    NAME            shift and go to state 80

    declarg                        shift and go to state 81

state 62

    (25) statement -> VAR NAME AFFECT . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 83

state 63

    (39) expression -> PRINT LPAREN expression . RPAREN
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . MINUS expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . OR expression
    (45) expression -> expression . AND expression

    RPAREN          shift and go to state 84
    PLUS            shift and go to state 26
    TIMES           shift and go to state 27
    MINUS           shift and go to state 28
    DIVIDE          shift and go to state 29
    OR              shift and go to state 30
    AND             shift and go to state 31


state 64

    (26) condition -> IF LPAREN boolexpr RPAREN . block END
    (27) condition -> IF LPAREN boolexpr RPAREN . block ELSE block END
    (2) block -> . instruction block
    (3) block -> . condition block
    (4) block -> . loop block
    (5) block -> . funcdef block
    (6) block -> . instruction
    (7) block -> . condition
    (8) block -> . loop
    (9) block -> . funcdef
    (21) instruction -> . statement SEMICOLON
    (22) instruction -> . expression SEMICOLON
    (26) condition -> . IF LPAREN boolexpr RPAREN block END
    (27) condition -> . IF LPAREN boolexpr RPAREN block ELSE block END
    (28) loop -> . WHILE LPAREN boolexpr RPAREN block END
    (29) loop -> . UNTIL LPAREN boolexpr RPAREN block END
    (30) loop -> . FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END
    (10) funcdef -> . LET NAME LPAREN declarg RPAREN block END
    (11) funcdef -> . LET NAME LPAREN RPAREN block END
    (12) statement -> . RETURN expression
    (13) statement -> . NAME LPAREN callarg RPAREN
    (14) statement -> . NAME LPAREN RPAREN
    (23) statement -> . NAME AFFECT expression
    (24) statement -> . VAR NAME
    (25) statement -> . VAR NAME AFFECT expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    IF              shift and go to state 9
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 12
    FOR             shift and go to state 13
    LET             shift and go to state 15
    RETURN          shift and go to state 16
    NAME            shift and go to state 14
    VAR             shift and go to state 17
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    block                          shift and go to state 85
    instruction                    shift and go to state 3
    condition                      shift and go to state 4
    loop                           shift and go to state 5
    funcdef                        shift and go to state 6
    statement                      shift and go to state 7
    expression                     shift and go to state 8

state 65

    (31) boolexpr -> boolexpr COR . boolexpr
    (31) boolexpr -> . boolexpr COR boolexpr
    (32) boolexpr -> . expression CAND expression
    (33) boolexpr -> . expression GT expression
    (34) boolexpr -> . expression LT expression
    (35) boolexpr -> . expression LOE expression
    (36) boolexpr -> . expression GOE expression
    (37) boolexpr -> . expression EQUALS expression
    (38) boolexpr -> . expression DIFFERENT expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    boolexpr                       shift and go to state 86
    expression                     shift and go to state 51

state 66

    (32) boolexpr -> expression CAND . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 87

state 67

    (33) boolexpr -> expression GT . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 88

state 68

    (34) boolexpr -> expression LT . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 89

state 69

    (35) boolexpr -> expression LOE . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 90

state 70

    (36) boolexpr -> expression GOE . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 91

state 71

    (37) boolexpr -> expression EQUALS . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 92

state 72

    (38) boolexpr -> expression DIFFERENT . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 93

state 73

    (15) expression -> NAME LPAREN callarg . RPAREN

    RPAREN          shift and go to state 94


state 74

    (16) expression -> NAME LPAREN RPAREN .

    RPAREN          reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    PLUS            reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    TIMES           reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    MINUS           reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    DIVIDE          reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    OR              reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    AND             reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    SEMICOLON       reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    CAND            reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    GT              reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    LT              reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    LOE             reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    GOE             reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    EQUALS          reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    DIFFERENT       reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    COMMA           reduce using rule 16 (expression -> NAME LPAREN RPAREN .)
    COR             reduce using rule 16 (expression -> NAME LPAREN RPAREN .)


state 75

    (28) loop -> WHILE LPAREN boolexpr RPAREN . block END
    (2) block -> . instruction block
    (3) block -> . condition block
    (4) block -> . loop block
    (5) block -> . funcdef block
    (6) block -> . instruction
    (7) block -> . condition
    (8) block -> . loop
    (9) block -> . funcdef
    (21) instruction -> . statement SEMICOLON
    (22) instruction -> . expression SEMICOLON
    (26) condition -> . IF LPAREN boolexpr RPAREN block END
    (27) condition -> . IF LPAREN boolexpr RPAREN block ELSE block END
    (28) loop -> . WHILE LPAREN boolexpr RPAREN block END
    (29) loop -> . UNTIL LPAREN boolexpr RPAREN block END
    (30) loop -> . FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END
    (10) funcdef -> . LET NAME LPAREN declarg RPAREN block END
    (11) funcdef -> . LET NAME LPAREN RPAREN block END
    (12) statement -> . RETURN expression
    (13) statement -> . NAME LPAREN callarg RPAREN
    (14) statement -> . NAME LPAREN RPAREN
    (23) statement -> . NAME AFFECT expression
    (24) statement -> . VAR NAME
    (25) statement -> . VAR NAME AFFECT expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    IF              shift and go to state 9
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 12
    FOR             shift and go to state 13
    LET             shift and go to state 15
    RETURN          shift and go to state 16
    NAME            shift and go to state 14
    VAR             shift and go to state 17
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    block                          shift and go to state 95
    instruction                    shift and go to state 3
    condition                      shift and go to state 4
    loop                           shift and go to state 5
    funcdef                        shift and go to state 6
    statement                      shift and go to state 7
    expression                     shift and go to state 8

state 76

    (29) loop -> UNTIL LPAREN boolexpr RPAREN . block END
    (2) block -> . instruction block
    (3) block -> . condition block
    (4) block -> . loop block
    (5) block -> . funcdef block
    (6) block -> . instruction
    (7) block -> . condition
    (8) block -> . loop
    (9) block -> . funcdef
    (21) instruction -> . statement SEMICOLON
    (22) instruction -> . expression SEMICOLON
    (26) condition -> . IF LPAREN boolexpr RPAREN block END
    (27) condition -> . IF LPAREN boolexpr RPAREN block ELSE block END
    (28) loop -> . WHILE LPAREN boolexpr RPAREN block END
    (29) loop -> . UNTIL LPAREN boolexpr RPAREN block END
    (30) loop -> . FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END
    (10) funcdef -> . LET NAME LPAREN declarg RPAREN block END
    (11) funcdef -> . LET NAME LPAREN RPAREN block END
    (12) statement -> . RETURN expression
    (13) statement -> . NAME LPAREN callarg RPAREN
    (14) statement -> . NAME LPAREN RPAREN
    (23) statement -> . NAME AFFECT expression
    (24) statement -> . VAR NAME
    (25) statement -> . VAR NAME AFFECT expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    IF              shift and go to state 9
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 12
    FOR             shift and go to state 13
    LET             shift and go to state 15
    RETURN          shift and go to state 16
    NAME            shift and go to state 14
    VAR             shift and go to state 17
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    block                          shift and go to state 96
    instruction                    shift and go to state 3
    condition                      shift and go to state 4
    loop                           shift and go to state 5
    funcdef                        shift and go to state 6
    statement                      shift and go to state 7
    expression                     shift and go to state 8

state 77

    (30) loop -> FOR LPAREN NAME SEMICOLON . boolexpr SEMICOLON statement RPAREN block END
    (31) boolexpr -> . boolexpr COR boolexpr
    (32) boolexpr -> . expression CAND expression
    (33) boolexpr -> . expression GT expression
    (34) boolexpr -> . expression LT expression
    (35) boolexpr -> . expression LOE expression
    (36) boolexpr -> . expression GOE expression
    (37) boolexpr -> . expression EQUALS expression
    (38) boolexpr -> . expression DIFFERENT expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    boolexpr                       shift and go to state 97
    expression                     shift and go to state 51

state 78

    (13) statement -> NAME LPAREN callarg RPAREN .
    (15) expression -> NAME LPAREN callarg RPAREN .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 13 (statement -> NAME LPAREN callarg RPAREN .)
    SEMICOLON       reduce using rule 13 (statement -> NAME LPAREN callarg RPAREN .)
    PLUS            reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    TIMES           reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    MINUS           reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    DIVIDE          reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    OR              reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    AND             reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)

  ! SEMICOLON       [ reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .) ]


state 79

    (19) callarg -> expression COMMA . callarg
    (19) callarg -> . expression COMMA callarg
    (20) callarg -> . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    expression                     shift and go to state 59
    callarg                        shift and go to state 98

state 80

    (17) declarg -> NAME . COMMA declarg
    (18) declarg -> NAME .

    COMMA           shift and go to state 99
    RPAREN          reduce using rule 18 (declarg -> NAME .)


state 81

    (10) funcdef -> LET NAME LPAREN declarg . RPAREN block END

    RPAREN          shift and go to state 100


state 82

    (11) funcdef -> LET NAME LPAREN RPAREN . block END
    (2) block -> . instruction block
    (3) block -> . condition block
    (4) block -> . loop block
    (5) block -> . funcdef block
    (6) block -> . instruction
    (7) block -> . condition
    (8) block -> . loop
    (9) block -> . funcdef
    (21) instruction -> . statement SEMICOLON
    (22) instruction -> . expression SEMICOLON
    (26) condition -> . IF LPAREN boolexpr RPAREN block END
    (27) condition -> . IF LPAREN boolexpr RPAREN block ELSE block END
    (28) loop -> . WHILE LPAREN boolexpr RPAREN block END
    (29) loop -> . UNTIL LPAREN boolexpr RPAREN block END
    (30) loop -> . FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END
    (10) funcdef -> . LET NAME LPAREN declarg RPAREN block END
    (11) funcdef -> . LET NAME LPAREN RPAREN block END
    (12) statement -> . RETURN expression
    (13) statement -> . NAME LPAREN callarg RPAREN
    (14) statement -> . NAME LPAREN RPAREN
    (23) statement -> . NAME AFFECT expression
    (24) statement -> . VAR NAME
    (25) statement -> . VAR NAME AFFECT expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    IF              shift and go to state 9
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 12
    FOR             shift and go to state 13
    LET             shift and go to state 15
    RETURN          shift and go to state 16
    NAME            shift and go to state 14
    VAR             shift and go to state 17
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    block                          shift and go to state 101
    instruction                    shift and go to state 3
    condition                      shift and go to state 4
    loop                           shift and go to state 5
    funcdef                        shift and go to state 6
    statement                      shift and go to state 7
    expression                     shift and go to state 8

state 83

    (25) statement -> VAR NAME AFFECT expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . MINUS expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . OR expression
    (45) expression -> expression . AND expression

    SEMICOLON       reduce using rule 25 (statement -> VAR NAME AFFECT expression .)
    RPAREN          reduce using rule 25 (statement -> VAR NAME AFFECT expression .)
    PLUS            shift and go to state 26
    TIMES           shift and go to state 27
    MINUS           shift and go to state 28
    DIVIDE          shift and go to state 29
    OR              shift and go to state 30
    AND             shift and go to state 31


state 84

    (39) expression -> PRINT LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 39 (expression -> PRINT LPAREN expression RPAREN .)
    PLUS            reduce using rule 39 (expression -> PRINT LPAREN expression RPAREN .)
    TIMES           reduce using rule 39 (expression -> PRINT LPAREN expression RPAREN .)
    MINUS           reduce using rule 39 (expression -> PRINT LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 39 (expression -> PRINT LPAREN expression RPAREN .)
    OR              reduce using rule 39 (expression -> PRINT LPAREN expression RPAREN .)
    AND             reduce using rule 39 (expression -> PRINT LPAREN expression RPAREN .)
    RPAREN          reduce using rule 39 (expression -> PRINT LPAREN expression RPAREN .)
    CAND            reduce using rule 39 (expression -> PRINT LPAREN expression RPAREN .)
    GT              reduce using rule 39 (expression -> PRINT LPAREN expression RPAREN .)
    LT              reduce using rule 39 (expression -> PRINT LPAREN expression RPAREN .)
    LOE             reduce using rule 39 (expression -> PRINT LPAREN expression RPAREN .)
    GOE             reduce using rule 39 (expression -> PRINT LPAREN expression RPAREN .)
    EQUALS          reduce using rule 39 (expression -> PRINT LPAREN expression RPAREN .)
    DIFFERENT       reduce using rule 39 (expression -> PRINT LPAREN expression RPAREN .)
    COMMA           reduce using rule 39 (expression -> PRINT LPAREN expression RPAREN .)
    COR             reduce using rule 39 (expression -> PRINT LPAREN expression RPAREN .)


state 85

    (26) condition -> IF LPAREN boolexpr RPAREN block . END
    (27) condition -> IF LPAREN boolexpr RPAREN block . ELSE block END

    END             shift and go to state 102
    ELSE            shift and go to state 103


state 86

    (31) boolexpr -> boolexpr COR boolexpr .
    (31) boolexpr -> boolexpr . COR boolexpr

  ! shift/reduce conflict for COR resolved as shift
    RPAREN          reduce using rule 31 (boolexpr -> boolexpr COR boolexpr .)
    SEMICOLON       reduce using rule 31 (boolexpr -> boolexpr COR boolexpr .)
    COR             shift and go to state 65

  ! COR             [ reduce using rule 31 (boolexpr -> boolexpr COR boolexpr .) ]


state 87

    (32) boolexpr -> expression CAND expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . MINUS expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . OR expression
    (45) expression -> expression . AND expression

    RPAREN          reduce using rule 32 (boolexpr -> expression CAND expression .)
    COR             reduce using rule 32 (boolexpr -> expression CAND expression .)
    SEMICOLON       reduce using rule 32 (boolexpr -> expression CAND expression .)
    PLUS            shift and go to state 26
    TIMES           shift and go to state 27
    MINUS           shift and go to state 28
    DIVIDE          shift and go to state 29
    OR              shift and go to state 30
    AND             shift and go to state 31


state 88

    (33) boolexpr -> expression GT expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . MINUS expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . OR expression
    (45) expression -> expression . AND expression

    RPAREN          reduce using rule 33 (boolexpr -> expression GT expression .)
    COR             reduce using rule 33 (boolexpr -> expression GT expression .)
    SEMICOLON       reduce using rule 33 (boolexpr -> expression GT expression .)
    PLUS            shift and go to state 26
    TIMES           shift and go to state 27
    MINUS           shift and go to state 28
    DIVIDE          shift and go to state 29
    OR              shift and go to state 30
    AND             shift and go to state 31


state 89

    (34) boolexpr -> expression LT expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . MINUS expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . OR expression
    (45) expression -> expression . AND expression

    RPAREN          reduce using rule 34 (boolexpr -> expression LT expression .)
    COR             reduce using rule 34 (boolexpr -> expression LT expression .)
    SEMICOLON       reduce using rule 34 (boolexpr -> expression LT expression .)
    PLUS            shift and go to state 26
    TIMES           shift and go to state 27
    MINUS           shift and go to state 28
    DIVIDE          shift and go to state 29
    OR              shift and go to state 30
    AND             shift and go to state 31


state 90

    (35) boolexpr -> expression LOE expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . MINUS expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . OR expression
    (45) expression -> expression . AND expression

    RPAREN          reduce using rule 35 (boolexpr -> expression LOE expression .)
    COR             reduce using rule 35 (boolexpr -> expression LOE expression .)
    SEMICOLON       reduce using rule 35 (boolexpr -> expression LOE expression .)
    PLUS            shift and go to state 26
    TIMES           shift and go to state 27
    MINUS           shift and go to state 28
    DIVIDE          shift and go to state 29
    OR              shift and go to state 30
    AND             shift and go to state 31


state 91

    (36) boolexpr -> expression GOE expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . MINUS expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . OR expression
    (45) expression -> expression . AND expression

    RPAREN          reduce using rule 36 (boolexpr -> expression GOE expression .)
    COR             reduce using rule 36 (boolexpr -> expression GOE expression .)
    SEMICOLON       reduce using rule 36 (boolexpr -> expression GOE expression .)
    PLUS            shift and go to state 26
    TIMES           shift and go to state 27
    MINUS           shift and go to state 28
    DIVIDE          shift and go to state 29
    OR              shift and go to state 30
    AND             shift and go to state 31


state 92

    (37) boolexpr -> expression EQUALS expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . MINUS expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . OR expression
    (45) expression -> expression . AND expression

    RPAREN          reduce using rule 37 (boolexpr -> expression EQUALS expression .)
    COR             reduce using rule 37 (boolexpr -> expression EQUALS expression .)
    SEMICOLON       reduce using rule 37 (boolexpr -> expression EQUALS expression .)
    PLUS            shift and go to state 26
    TIMES           shift and go to state 27
    MINUS           shift and go to state 28
    DIVIDE          shift and go to state 29
    OR              shift and go to state 30
    AND             shift and go to state 31


state 93

    (38) boolexpr -> expression DIFFERENT expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . MINUS expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . OR expression
    (45) expression -> expression . AND expression

    RPAREN          reduce using rule 38 (boolexpr -> expression DIFFERENT expression .)
    COR             reduce using rule 38 (boolexpr -> expression DIFFERENT expression .)
    SEMICOLON       reduce using rule 38 (boolexpr -> expression DIFFERENT expression .)
    PLUS            shift and go to state 26
    TIMES           shift and go to state 27
    MINUS           shift and go to state 28
    DIVIDE          shift and go to state 29
    OR              shift and go to state 30
    AND             shift and go to state 31


state 94

    (15) expression -> NAME LPAREN callarg RPAREN .

    RPAREN          reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    PLUS            reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    TIMES           reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    MINUS           reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    DIVIDE          reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    OR              reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    AND             reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    SEMICOLON       reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    CAND            reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    GT              reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    LT              reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    LOE             reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    GOE             reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    EQUALS          reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    DIFFERENT       reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    COMMA           reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)
    COR             reduce using rule 15 (expression -> NAME LPAREN callarg RPAREN .)


state 95

    (28) loop -> WHILE LPAREN boolexpr RPAREN block . END

    END             shift and go to state 104


state 96

    (29) loop -> UNTIL LPAREN boolexpr RPAREN block . END

    END             shift and go to state 105


state 97

    (30) loop -> FOR LPAREN NAME SEMICOLON boolexpr . SEMICOLON statement RPAREN block END
    (31) boolexpr -> boolexpr . COR boolexpr

    SEMICOLON       shift and go to state 106
    COR             shift and go to state 65


state 98

    (19) callarg -> expression COMMA callarg .

    RPAREN          reduce using rule 19 (callarg -> expression COMMA callarg .)


state 99

    (17) declarg -> NAME COMMA . declarg
    (17) declarg -> . NAME COMMA declarg
    (18) declarg -> . NAME

    NAME            shift and go to state 80

    declarg                        shift and go to state 107

state 100

    (10) funcdef -> LET NAME LPAREN declarg RPAREN . block END
    (2) block -> . instruction block
    (3) block -> . condition block
    (4) block -> . loop block
    (5) block -> . funcdef block
    (6) block -> . instruction
    (7) block -> . condition
    (8) block -> . loop
    (9) block -> . funcdef
    (21) instruction -> . statement SEMICOLON
    (22) instruction -> . expression SEMICOLON
    (26) condition -> . IF LPAREN boolexpr RPAREN block END
    (27) condition -> . IF LPAREN boolexpr RPAREN block ELSE block END
    (28) loop -> . WHILE LPAREN boolexpr RPAREN block END
    (29) loop -> . UNTIL LPAREN boolexpr RPAREN block END
    (30) loop -> . FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END
    (10) funcdef -> . LET NAME LPAREN declarg RPAREN block END
    (11) funcdef -> . LET NAME LPAREN RPAREN block END
    (12) statement -> . RETURN expression
    (13) statement -> . NAME LPAREN callarg RPAREN
    (14) statement -> . NAME LPAREN RPAREN
    (23) statement -> . NAME AFFECT expression
    (24) statement -> . VAR NAME
    (25) statement -> . VAR NAME AFFECT expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    IF              shift and go to state 9
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 12
    FOR             shift and go to state 13
    LET             shift and go to state 15
    RETURN          shift and go to state 16
    NAME            shift and go to state 14
    VAR             shift and go to state 17
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    block                          shift and go to state 108
    instruction                    shift and go to state 3
    condition                      shift and go to state 4
    loop                           shift and go to state 5
    funcdef                        shift and go to state 6
    statement                      shift and go to state 7
    expression                     shift and go to state 8

state 101

    (11) funcdef -> LET NAME LPAREN RPAREN block . END

    END             shift and go to state 109


state 102

    (26) condition -> IF LPAREN boolexpr RPAREN block END .

    IF              reduce using rule 26 (condition -> IF LPAREN boolexpr RPAREN block END .)
    WHILE           reduce using rule 26 (condition -> IF LPAREN boolexpr RPAREN block END .)
    UNTIL           reduce using rule 26 (condition -> IF LPAREN boolexpr RPAREN block END .)
    FOR             reduce using rule 26 (condition -> IF LPAREN boolexpr RPAREN block END .)
    LET             reduce using rule 26 (condition -> IF LPAREN boolexpr RPAREN block END .)
    RETURN          reduce using rule 26 (condition -> IF LPAREN boolexpr RPAREN block END .)
    NAME            reduce using rule 26 (condition -> IF LPAREN boolexpr RPAREN block END .)
    VAR             reduce using rule 26 (condition -> IF LPAREN boolexpr RPAREN block END .)
    PRINT           reduce using rule 26 (condition -> IF LPAREN boolexpr RPAREN block END .)
    LPAREN          reduce using rule 26 (condition -> IF LPAREN boolexpr RPAREN block END .)
    NUMBER          reduce using rule 26 (condition -> IF LPAREN boolexpr RPAREN block END .)
    $end            reduce using rule 26 (condition -> IF LPAREN boolexpr RPAREN block END .)
    END             reduce using rule 26 (condition -> IF LPAREN boolexpr RPAREN block END .)
    ELSE            reduce using rule 26 (condition -> IF LPAREN boolexpr RPAREN block END .)


state 103

    (27) condition -> IF LPAREN boolexpr RPAREN block ELSE . block END
    (2) block -> . instruction block
    (3) block -> . condition block
    (4) block -> . loop block
    (5) block -> . funcdef block
    (6) block -> . instruction
    (7) block -> . condition
    (8) block -> . loop
    (9) block -> . funcdef
    (21) instruction -> . statement SEMICOLON
    (22) instruction -> . expression SEMICOLON
    (26) condition -> . IF LPAREN boolexpr RPAREN block END
    (27) condition -> . IF LPAREN boolexpr RPAREN block ELSE block END
    (28) loop -> . WHILE LPAREN boolexpr RPAREN block END
    (29) loop -> . UNTIL LPAREN boolexpr RPAREN block END
    (30) loop -> . FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END
    (10) funcdef -> . LET NAME LPAREN declarg RPAREN block END
    (11) funcdef -> . LET NAME LPAREN RPAREN block END
    (12) statement -> . RETURN expression
    (13) statement -> . NAME LPAREN callarg RPAREN
    (14) statement -> . NAME LPAREN RPAREN
    (23) statement -> . NAME AFFECT expression
    (24) statement -> . VAR NAME
    (25) statement -> . VAR NAME AFFECT expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    IF              shift and go to state 9
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 12
    FOR             shift and go to state 13
    LET             shift and go to state 15
    RETURN          shift and go to state 16
    NAME            shift and go to state 14
    VAR             shift and go to state 17
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    block                          shift and go to state 110
    instruction                    shift and go to state 3
    condition                      shift and go to state 4
    loop                           shift and go to state 5
    funcdef                        shift and go to state 6
    statement                      shift and go to state 7
    expression                     shift and go to state 8

state 104

    (28) loop -> WHILE LPAREN boolexpr RPAREN block END .

    IF              reduce using rule 28 (loop -> WHILE LPAREN boolexpr RPAREN block END .)
    WHILE           reduce using rule 28 (loop -> WHILE LPAREN boolexpr RPAREN block END .)
    UNTIL           reduce using rule 28 (loop -> WHILE LPAREN boolexpr RPAREN block END .)
    FOR             reduce using rule 28 (loop -> WHILE LPAREN boolexpr RPAREN block END .)
    LET             reduce using rule 28 (loop -> WHILE LPAREN boolexpr RPAREN block END .)
    RETURN          reduce using rule 28 (loop -> WHILE LPAREN boolexpr RPAREN block END .)
    NAME            reduce using rule 28 (loop -> WHILE LPAREN boolexpr RPAREN block END .)
    VAR             reduce using rule 28 (loop -> WHILE LPAREN boolexpr RPAREN block END .)
    PRINT           reduce using rule 28 (loop -> WHILE LPAREN boolexpr RPAREN block END .)
    LPAREN          reduce using rule 28 (loop -> WHILE LPAREN boolexpr RPAREN block END .)
    NUMBER          reduce using rule 28 (loop -> WHILE LPAREN boolexpr RPAREN block END .)
    $end            reduce using rule 28 (loop -> WHILE LPAREN boolexpr RPAREN block END .)
    END             reduce using rule 28 (loop -> WHILE LPAREN boolexpr RPAREN block END .)
    ELSE            reduce using rule 28 (loop -> WHILE LPAREN boolexpr RPAREN block END .)


state 105

    (29) loop -> UNTIL LPAREN boolexpr RPAREN block END .

    IF              reduce using rule 29 (loop -> UNTIL LPAREN boolexpr RPAREN block END .)
    WHILE           reduce using rule 29 (loop -> UNTIL LPAREN boolexpr RPAREN block END .)
    UNTIL           reduce using rule 29 (loop -> UNTIL LPAREN boolexpr RPAREN block END .)
    FOR             reduce using rule 29 (loop -> UNTIL LPAREN boolexpr RPAREN block END .)
    LET             reduce using rule 29 (loop -> UNTIL LPAREN boolexpr RPAREN block END .)
    RETURN          reduce using rule 29 (loop -> UNTIL LPAREN boolexpr RPAREN block END .)
    NAME            reduce using rule 29 (loop -> UNTIL LPAREN boolexpr RPAREN block END .)
    VAR             reduce using rule 29 (loop -> UNTIL LPAREN boolexpr RPAREN block END .)
    PRINT           reduce using rule 29 (loop -> UNTIL LPAREN boolexpr RPAREN block END .)
    LPAREN          reduce using rule 29 (loop -> UNTIL LPAREN boolexpr RPAREN block END .)
    NUMBER          reduce using rule 29 (loop -> UNTIL LPAREN boolexpr RPAREN block END .)
    $end            reduce using rule 29 (loop -> UNTIL LPAREN boolexpr RPAREN block END .)
    END             reduce using rule 29 (loop -> UNTIL LPAREN boolexpr RPAREN block END .)
    ELSE            reduce using rule 29 (loop -> UNTIL LPAREN boolexpr RPAREN block END .)


state 106

    (30) loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON . statement RPAREN block END
    (12) statement -> . RETURN expression
    (13) statement -> . NAME LPAREN callarg RPAREN
    (14) statement -> . NAME LPAREN RPAREN
    (23) statement -> . NAME AFFECT expression
    (24) statement -> . VAR NAME
    (25) statement -> . VAR NAME AFFECT expression

    RETURN          shift and go to state 16
    NAME            shift and go to state 111
    VAR             shift and go to state 17

    statement                      shift and go to state 112

state 107

    (17) declarg -> NAME COMMA declarg .

    RPAREN          reduce using rule 17 (declarg -> NAME COMMA declarg .)


state 108

    (10) funcdef -> LET NAME LPAREN declarg RPAREN block . END

    END             shift and go to state 113


state 109

    (11) funcdef -> LET NAME LPAREN RPAREN block END .

    IF              reduce using rule 11 (funcdef -> LET NAME LPAREN RPAREN block END .)
    WHILE           reduce using rule 11 (funcdef -> LET NAME LPAREN RPAREN block END .)
    UNTIL           reduce using rule 11 (funcdef -> LET NAME LPAREN RPAREN block END .)
    FOR             reduce using rule 11 (funcdef -> LET NAME LPAREN RPAREN block END .)
    LET             reduce using rule 11 (funcdef -> LET NAME LPAREN RPAREN block END .)
    RETURN          reduce using rule 11 (funcdef -> LET NAME LPAREN RPAREN block END .)
    NAME            reduce using rule 11 (funcdef -> LET NAME LPAREN RPAREN block END .)
    VAR             reduce using rule 11 (funcdef -> LET NAME LPAREN RPAREN block END .)
    PRINT           reduce using rule 11 (funcdef -> LET NAME LPAREN RPAREN block END .)
    LPAREN          reduce using rule 11 (funcdef -> LET NAME LPAREN RPAREN block END .)
    NUMBER          reduce using rule 11 (funcdef -> LET NAME LPAREN RPAREN block END .)
    $end            reduce using rule 11 (funcdef -> LET NAME LPAREN RPAREN block END .)
    END             reduce using rule 11 (funcdef -> LET NAME LPAREN RPAREN block END .)
    ELSE            reduce using rule 11 (funcdef -> LET NAME LPAREN RPAREN block END .)


state 110

    (27) condition -> IF LPAREN boolexpr RPAREN block ELSE block . END

    END             shift and go to state 114


state 111

    (13) statement -> NAME . LPAREN callarg RPAREN
    (14) statement -> NAME . LPAREN RPAREN
    (23) statement -> NAME . AFFECT expression

    LPAREN          shift and go to state 115
    AFFECT          shift and go to state 39


state 112

    (30) loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement . RPAREN block END

    RPAREN          shift and go to state 116


state 113

    (10) funcdef -> LET NAME LPAREN declarg RPAREN block END .

    IF              reduce using rule 10 (funcdef -> LET NAME LPAREN declarg RPAREN block END .)
    WHILE           reduce using rule 10 (funcdef -> LET NAME LPAREN declarg RPAREN block END .)
    UNTIL           reduce using rule 10 (funcdef -> LET NAME LPAREN declarg RPAREN block END .)
    FOR             reduce using rule 10 (funcdef -> LET NAME LPAREN declarg RPAREN block END .)
    LET             reduce using rule 10 (funcdef -> LET NAME LPAREN declarg RPAREN block END .)
    RETURN          reduce using rule 10 (funcdef -> LET NAME LPAREN declarg RPAREN block END .)
    NAME            reduce using rule 10 (funcdef -> LET NAME LPAREN declarg RPAREN block END .)
    VAR             reduce using rule 10 (funcdef -> LET NAME LPAREN declarg RPAREN block END .)
    PRINT           reduce using rule 10 (funcdef -> LET NAME LPAREN declarg RPAREN block END .)
    LPAREN          reduce using rule 10 (funcdef -> LET NAME LPAREN declarg RPAREN block END .)
    NUMBER          reduce using rule 10 (funcdef -> LET NAME LPAREN declarg RPAREN block END .)
    $end            reduce using rule 10 (funcdef -> LET NAME LPAREN declarg RPAREN block END .)
    END             reduce using rule 10 (funcdef -> LET NAME LPAREN declarg RPAREN block END .)
    ELSE            reduce using rule 10 (funcdef -> LET NAME LPAREN declarg RPAREN block END .)


state 114

    (27) condition -> IF LPAREN boolexpr RPAREN block ELSE block END .

    IF              reduce using rule 27 (condition -> IF LPAREN boolexpr RPAREN block ELSE block END .)
    WHILE           reduce using rule 27 (condition -> IF LPAREN boolexpr RPAREN block ELSE block END .)
    UNTIL           reduce using rule 27 (condition -> IF LPAREN boolexpr RPAREN block ELSE block END .)
    FOR             reduce using rule 27 (condition -> IF LPAREN boolexpr RPAREN block ELSE block END .)
    LET             reduce using rule 27 (condition -> IF LPAREN boolexpr RPAREN block ELSE block END .)
    RETURN          reduce using rule 27 (condition -> IF LPAREN boolexpr RPAREN block ELSE block END .)
    NAME            reduce using rule 27 (condition -> IF LPAREN boolexpr RPAREN block ELSE block END .)
    VAR             reduce using rule 27 (condition -> IF LPAREN boolexpr RPAREN block ELSE block END .)
    PRINT           reduce using rule 27 (condition -> IF LPAREN boolexpr RPAREN block ELSE block END .)
    LPAREN          reduce using rule 27 (condition -> IF LPAREN boolexpr RPAREN block ELSE block END .)
    NUMBER          reduce using rule 27 (condition -> IF LPAREN boolexpr RPAREN block ELSE block END .)
    $end            reduce using rule 27 (condition -> IF LPAREN boolexpr RPAREN block ELSE block END .)
    END             reduce using rule 27 (condition -> IF LPAREN boolexpr RPAREN block ELSE block END .)
    ELSE            reduce using rule 27 (condition -> IF LPAREN boolexpr RPAREN block ELSE block END .)


state 115

    (13) statement -> NAME LPAREN . callarg RPAREN
    (14) statement -> NAME LPAREN . RPAREN
    (19) callarg -> . expression COMMA callarg
    (20) callarg -> . expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    RPAREN          shift and go to state 118
    NAME            shift and go to state 34
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    callarg                        shift and go to state 117
    expression                     shift and go to state 59

state 116

    (30) loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN . block END
    (2) block -> . instruction block
    (3) block -> . condition block
    (4) block -> . loop block
    (5) block -> . funcdef block
    (6) block -> . instruction
    (7) block -> . condition
    (8) block -> . loop
    (9) block -> . funcdef
    (21) instruction -> . statement SEMICOLON
    (22) instruction -> . expression SEMICOLON
    (26) condition -> . IF LPAREN boolexpr RPAREN block END
    (27) condition -> . IF LPAREN boolexpr RPAREN block ELSE block END
    (28) loop -> . WHILE LPAREN boolexpr RPAREN block END
    (29) loop -> . UNTIL LPAREN boolexpr RPAREN block END
    (30) loop -> . FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END
    (10) funcdef -> . LET NAME LPAREN declarg RPAREN block END
    (11) funcdef -> . LET NAME LPAREN RPAREN block END
    (12) statement -> . RETURN expression
    (13) statement -> . NAME LPAREN callarg RPAREN
    (14) statement -> . NAME LPAREN RPAREN
    (23) statement -> . NAME AFFECT expression
    (24) statement -> . VAR NAME
    (25) statement -> . VAR NAME AFFECT expression
    (15) expression -> . NAME LPAREN callarg RPAREN
    (16) expression -> . NAME LPAREN RPAREN
    (39) expression -> . PRINT LPAREN expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression MINUS expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression OR expression
    (45) expression -> . expression AND expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . NUMBER
    (48) expression -> . NAME

    IF              shift and go to state 9
    WHILE           shift and go to state 11
    UNTIL           shift and go to state 12
    FOR             shift and go to state 13
    LET             shift and go to state 15
    RETURN          shift and go to state 16
    NAME            shift and go to state 14
    VAR             shift and go to state 17
    PRINT           shift and go to state 18
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 19

    statement                      shift and go to state 7
    block                          shift and go to state 119
    instruction                    shift and go to state 3
    condition                      shift and go to state 4
    loop                           shift and go to state 5
    funcdef                        shift and go to state 6
    expression                     shift and go to state 8

state 117

    (13) statement -> NAME LPAREN callarg . RPAREN

    RPAREN          shift and go to state 120


state 118

    (14) statement -> NAME LPAREN RPAREN .

    RPAREN          reduce using rule 14 (statement -> NAME LPAREN RPAREN .)


state 119

    (30) loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block . END

    END             shift and go to state 121


state 120

    (13) statement -> NAME LPAREN callarg RPAREN .

    RPAREN          reduce using rule 13 (statement -> NAME LPAREN callarg RPAREN .)


state 121

    (30) loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END .

    IF              reduce using rule 30 (loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END .)
    WHILE           reduce using rule 30 (loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END .)
    UNTIL           reduce using rule 30 (loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END .)
    FOR             reduce using rule 30 (loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END .)
    LET             reduce using rule 30 (loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END .)
    RETURN          reduce using rule 30 (loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END .)
    NAME            reduce using rule 30 (loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END .)
    VAR             reduce using rule 30 (loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END .)
    PRINT           reduce using rule 30 (loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END .)
    LPAREN          reduce using rule 30 (loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END .)
    NUMBER          reduce using rule 30 (loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END .)
    $end            reduce using rule 30 (loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END .)
    END             reduce using rule 30 (loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END .)
    ELSE            reduce using rule 30 (loop -> FOR LPAREN NAME SEMICOLON boolexpr SEMICOLON statement RPAREN block END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COR in state 86 resolved as shift
WARNING: reduce/reduce conflict in state 58 resolved using rule (statement -> NAME LPAREN RPAREN)
WARNING: rejected rule (expression -> NAME LPAREN RPAREN) in state 58
WARNING: reduce/reduce conflict in state 78 resolved using rule (statement -> NAME LPAREN callarg RPAREN)
WARNING: rejected rule (expression -> NAME LPAREN callarg RPAREN) in state 78
